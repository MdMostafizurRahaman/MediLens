import { GoogleGenerativeAI } from '@google/generative-ai'
import { NextResponse } from 'next/server'

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)

// Cache for frequently asked questions
const responseCache = new Map()
const requestTracker = new Map() // Track recent requests to prevent duplicates
const CACHE_DURATION = 5 * 60 * 1000 // 5 minutes
const DUPLICATE_WINDOW = 2000 // 2 seconds to prevent duplicate requests

export async function POST(request) {
  try {
    const { message, chatHistory, context, prescriptionData } = await request.json()

    if (!message) {
      return NextResponse.json({ error: 'No message provided' }, { status: 400 })
    }

    // Create a request fingerprint to prevent duplicates
    const requestFingerprint = `${message.trim()}-${Date.now() - (Date.now() % DUPLICATE_WINDOW)}`
    
    // Check if this is a duplicate request
    if (requestTracker.has(requestFingerprint)) {
      const cachedResponse = requestTracker.get(requestFingerprint)
      return NextResponse.json({ 
        success: true, 
        response: cachedResponse,
        deduplicated: true 
      })
    }

    // Check cache for common questions (performance optimization)
    const cacheKey = message.toLowerCase().trim()
    const cached = responseCache.get(cacheKey)
    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
      // Store in request tracker too
      requestTracker.set(requestFingerprint, cached.response)
      setTimeout(() => requestTracker.delete(requestFingerprint), DUPLICATE_WINDOW)
      
      return NextResponse.json({ 
        success: true, 
        response: cached.response,
        cached: true 
      })
    }

    // Use faster model for better performance
    const model = genAI.getGenerativeModel({ 
      model: 'gemini-1.5-flash',
      generationConfig: {
        maxOutputTokens: 1000, // Limit for faster responses
        temperature: 0.7,
      }
    })

    // Build conversation context
    let conversationContext = ""
    if (chatHistory && chatHistory.length > 0) {
      conversationContext = chatHistory.map(msg => 
        `${msg.type === 'user' ? '‡¶∞‡ßã‡¶ó‡ßÄ' : '‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞'}: ${msg.content}`
      ).join('\n')
    }

    // Build prescription context if available
    let prescriptionContext = ""
    if (prescriptionData && (prescriptionData.medications || prescriptionData.diagnosis)) {
      prescriptionContext = "\n\n**‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶§‡¶•‡ßç‡¶Ø:**\n"
      
      if (prescriptionData.diagnosis) {
        prescriptionContext += `‡¶∞‡ßã‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶£‡¶Ø‡¶º: ${prescriptionData.diagnosis.condition || '‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶®‡ßá‡¶á'}\n`
      }
      
      if (prescriptionData.medications && prescriptionData.medications.length > 0) {
        prescriptionContext += "‡¶ì‡¶∑‡ßÅ‡¶ß‡¶∏‡¶Æ‡ßÇ‡¶π:\n"
        prescriptionData.medications.forEach((med, index) => {
          prescriptionContext += `${index + 1}. ${med.prescribedName || med.genericName || '‡¶®‡¶æ‡¶Æ ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶®‡ßá‡¶á'}`
          if (med.strength) prescriptionContext += ` (${med.strength})`
          if (med.frequency) prescriptionContext += ` - ${med.frequency}`
          prescriptionContext += "\n"
        })
      }
      
      if (prescriptionData.investigations && prescriptionData.investigations.length > 0) {
        prescriptionContext += "‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ-‡¶®‡¶ø‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ:\n"
        prescriptionData.investigations.forEach((test, index) => {
          prescriptionContext += `${index + 1}. ${test.test || '‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶®‡ßá‡¶á'}\n`
        })
      }
    }

    const prompt = `
‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßÄ ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶ï ‡¶è‡¶¨‡¶Ç MediLens ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ AI ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶§‡ßç‡¶¨:

üè• **‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶§‡ßç‡¶¨:**
- ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ (General Medicine)
- ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ (Emergency Medicine)  
- ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø‡¶∏‡ßá‡¶¨‡¶æ (Primary Healthcare)
- ‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ (Prescription Analysis)
- ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ (Health Education)

**‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:**
- ‡¶∏‡¶¨‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∞‡ßã‡¶ó‡ßÄ‡¶∞ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ ‡¶™‡ßç‡¶∞‡¶æ‡¶ß‡¶æ‡¶®‡ßç‡¶Ø ‡¶¶‡¶ø‡¶®
- ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡¶∞ ‡¶â‡¶™‡¶∏‡¶∞‡ßç‡¶ó‡ßá ‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï ‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶¨‡¶≤‡ßÅ‡¶®
- ‡¶Ö‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û ‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®

${prescriptionContext}

**‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶®:**
${conversationContext}

**‡¶∞‡ßã‡¶ó‡ßÄ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®/‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:**
"${message}"

**‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:**
- ‡¶∏‡¶π‡¶ú ‡¶ì ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®
- ‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡ßá‡¶á ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡¶ø‡¶®
- ‡¶Ö‡¶≠‡¶ø‡¶¨‡¶æ‡¶¶‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶ì ‡¶â‡¶∑‡ßç‡¶£ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®  
- ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ì ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡¶ø‡¶®
- ‡¶∏‡¶¨‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßá ‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®

**‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ:** ‡¶∏‡¶π‡¶ú ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ (‡¶Ö‡¶≠‡¶ø‡¶¨‡¶æ‡¶¶‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ß®-‡ß© ‡¶≤‡¶æ‡¶á‡¶®, ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§)
**‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶¨‡¶∞:** ‡¶∏‡¶π‡¶æ‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø‡¶∂‡ßÄ‡¶≤ ‡¶ì ‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞

‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶â‡¶™‡¶∞‡ßá‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®:
`

    const result = await model.generateContent(prompt)
    const response = await result.response
    const botResponse = response.text()

    // Clean and format the response
    const cleanedResponse = botResponse
      .replace(/\*\*/g, '') // Remove bold markdown
      .replace(/\*/g, '') // Remove other markdown
      .trim()

    // Add emojis and structure for better readability
    const formattedResponse = formatMedicalResponse(cleanedResponse, message, context, prescriptionData)

    // Cache common responses for performance
    if (isCommonQuestion(message)) {
      responseCache.set(cacheKey, {
        response: formattedResponse,
        timestamp: Date.now()
      })
    }

    // Store in request tracker to prevent immediate duplicates
    requestTracker.set(requestFingerprint, formattedResponse)
    setTimeout(() => requestTracker.delete(requestFingerprint), DUPLICATE_WINDOW)

    return NextResponse.json({
      success: true,
      response: formattedResponse,
      source: 'gemini-medical-ai'
    })

  } catch (error) {
    console.error('Medical chat error:', error)
    
    // Fallback to rule-based responses
    const fallbackResponse = getMedicalFallbackResponse(message)
    
    return NextResponse.json({
      success: true,
      response: fallbackResponse,
      source: 'fallback-medical'
    })
  }
}

function formatMedicalResponse(response, originalMessage, context, prescriptionData) {
  const lowerMessage = originalMessage.toLowerCase()
  
  // Add appropriate medical emojis based on content and context
  let formattedResponse = response
  
  if (context === 'prescription') {
    formattedResponse = 'üíä ' + formattedResponse
  } else if (lowerMessage.includes('‡¶ú‡ßç‡¶¨‡¶∞') || lowerMessage.includes('fever')) {
    formattedResponse = 'üå°Ô∏è ' + formattedResponse
  } else if (lowerMessage.includes('‡¶Æ‡¶æ‡¶•‡¶æ‡¶¨‡ßç‡¶Ø‡¶•‡¶æ') || lowerMessage.includes('headache')) {
    formattedResponse = 'üß† ' + formattedResponse
  } else if (lowerMessage.includes('‡¶™‡ßá‡¶ü') || lowerMessage.includes('stomach')) {
    formattedResponse = 'üçΩÔ∏è ' + formattedResponse
  } else if (lowerMessage.includes('‡¶π‡¶æ‡¶∞‡ßç‡¶ü') || lowerMessage.includes('heart')) {
    formattedResponse = '‚ù§Ô∏è ' + formattedResponse
  } else if (lowerMessage.includes('‡¶ï‡¶æ‡¶∂‡¶ø') || lowerMessage.includes('cough')) {
    formattedResponse = 'üò∑ ' + formattedResponse
  } else {
    formattedResponse = 'ü©∫ ' + formattedResponse
  }
  
  // Add prescription-specific disclaimer if prescription data is available
  if (prescriptionData) {
    formattedResponse += '\n\nüíä **‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§:** ‡¶è‡¶á ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡•§ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶ï‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§'
  } else {
    formattedResponse += '\n\n‚ö†Ô∏è **‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£:** ‡¶è‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂‡•§ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶ï‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§'
  }
  
  return formattedResponse
}

function getMedicalFallbackResponse(message) {
  const lowerMessage = message.toLowerCase()
  
  // Emergency conditions - immediate attention needed
  const emergencyKeywords = [
    'chest pain', 'difficulty breathing', 'unconscious', 'severe bleeding',
    '‡¶¨‡ßÅ‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶•‡¶æ', '‡¶∂‡ßç‡¶¨‡¶æ‡¶∏ ‡¶®‡¶ø‡¶§‡ßá ‡¶ï‡¶∑‡ßç‡¶ü', '‡¶Ö‡¶ú‡ßç‡¶û‡¶æ‡¶®', '‡¶∞‡¶ï‡ßç‡¶§‡¶ï‡ßç‡¶∑‡¶∞‡¶£'
  ]
  
  if (emergencyKeywords.some(keyword => lowerMessage.includes(keyword))) {
    return `üö® **‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!**

‡¶Ö‡¶¨‡¶ø‡¶≤‡¶Æ‡ßç‡¶¨‡ßá ‡¶®‡¶ø‡¶ï‡¶ü‡¶∏‡ßç‡¶• ‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤‡ßá‡¶∞ ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó‡ßá ‡¶Ø‡¶æ‡¶® ‡¶¨‡¶æ ‡ß¶‡ß¶‡ß¶ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§

üè• **‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï ‡¶ï‡¶∞‡¶£‡ßÄ‡¶Ø‡¶º:**
‚Ä¢ ‡¶∞‡ßã‡¶ó‡ßÄ‡¶ï‡ßá ‡¶Ü‡¶∞‡¶æ‡¶Æ‡¶¶‡¶æ‡¶Ø‡¶º‡¶ï ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®
‚Ä¢ ‡¶∂‡ßç‡¶¨‡¶æ‡¶∏-‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡ßá‡¶∞ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶®‡¶ú‡¶∞ ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®  
‚Ä¢ ‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶π‡¶æ‡¶∞‡¶æ‡¶≤‡ßá ‡¶™‡¶æ‡¶∂‡ßá ‡¶∂‡ßÅ‡¶á‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶®
‚Ä¢ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶®

‚ö†Ô∏è **‡¶¨‡¶ø‡¶≤‡¶Æ‡ßç‡¶¨ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ - ‡¶ú‡ßÄ‡¶¨‡¶® ‡¶ù‡ßÅ‡¶Å‡¶ï‡¶ø‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá!**`
  }
  
  // Common medical responses
  if (lowerMessage.includes('‡¶ú‡ßç‡¶¨‡¶∞') || lowerMessage.includes('fever')) {
    return `üå°Ô∏è **‡¶ú‡ßç‡¶¨‡¶∞‡ßá‡¶∞ ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ:**

**‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï ‡¶ï‡¶∞‡¶£‡ßÄ‡¶Ø‡¶º:**
‚Ä¢ ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶∏‡¶ø‡¶ü‡¶æ‡¶Æ‡¶≤ ‡ß´‡ß¶‡ß¶ ‡¶Æ‡¶ø‡¶ó‡ßç‡¶∞‡¶æ - ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡ß¨ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶Ø‡¶º
‚Ä¢ ‡¶™‡ßç‡¶∞‡¶ö‡ßÅ‡¶∞ ‡¶™‡¶æ‡¶®‡¶ø ‡¶ì ‡¶§‡¶∞‡¶≤ ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞
‚Ä¢ ‡¶π‡¶æ‡¶≤‡¶ï‡¶æ ‡¶ï‡¶æ‡¶™‡¶°‡¶º ‡¶™‡¶∞‡ßÅ‡¶®
‚Ä¢ ‡¶ï‡ßÅ‡¶∏‡ßÅ‡¶Æ ‡¶ó‡¶∞‡¶Æ ‡¶™‡¶æ‡¶®‡¶ø‡¶§‡ßá ‡¶ó‡ßã‡¶∏‡¶≤

**‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ:**
‚Ä¢ ‡ßß‡ß¶‡ß©¬∞F ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶ú‡ßç‡¶¨‡¶∞
‚Ä¢ ‡ß© ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶π‡¶≤‡ßá
‚Ä¢ ‡¶∂‡ßç‡¶¨‡¶æ‡¶∏ ‡¶ï‡¶∑‡ßç‡¶ü ‡¶¨‡¶æ ‡¶¨‡ßÅ‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶•‡¶æ ‡¶π‡¶≤‡ßá

‚û°Ô∏è ‡¶è‡¶∏‡¶¨ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï ‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡•§`
  }
  
  if (lowerMessage.includes('‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶¨‡ßá‡¶ü‡¶ø‡¶∏') || lowerMessage.includes('diabetes')) {
    return `üçé **‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶¨‡ßá‡¶ü‡¶ø‡¶∏ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£:**

**‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£:**
‚Ä¢ ‡¶ö‡¶ø‡¶®‡¶ø, ‡¶Æ‡¶ø‡¶∑‡ßç‡¶ü‡¶ø ‡¶ì ‡¶≠‡¶æ‡¶§ ‡¶ï‡¶Æ ‡¶ñ‡¶æ‡¶®
‚Ä¢ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∂‡¶æ‡¶ï‡¶∏‡¶¨‡¶ú‡¶ø ‡¶ì ‡¶Ü‡¶Å‡¶∂‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞
‚Ä¢ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶Ø‡¶º‡ßá ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶ñ‡¶æ‡¶®

**‡¶ú‡ßÄ‡¶¨‡¶®‡¶Ø‡¶æ‡¶§‡ßç‡¶∞‡¶æ:**
‚Ä¢ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡ß©‡ß¶ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶π‡¶æ‡¶Å‡¶ü‡ßÅ‡¶®
‚Ä¢ ‡¶ì‡¶ú‡¶® ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£‡ßá ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®
‚Ä¢ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ò‡ßÅ‡¶Æ ‡¶®‡¶ø‡¶®

**‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ:**
‚Ä¢ ‡¶Æ‡¶æ‡¶∏‡ßá ‡ßß ‡¶¨‡¶æ‡¶∞ ‡¶∞‡¶ï‡ßç‡¶§‡ßá‡¶∞ ‡¶ö‡¶ø‡¶®‡¶ø
‚Ä¢ ‡ß© ‡¶Æ‡¶æ‡¶∏‡ßá ‡ßß ‡¶¨‡¶æ‡¶∞ HbA1c
‚Ä¢ ‡¶ö‡ßã‡¶ñ ‡¶ì ‡¶ï‡¶ø‡¶°‡¶®‡¶ø ‡¶ö‡ßá‡¶ï‡¶Ü‡¶™`
  }
  
  if (lowerMessage.includes('‡¶∞‡¶ï‡ßç‡¶§‡¶ö‡¶æ‡¶™') || lowerMessage.includes('pressure')) {
    return `ü©∫ **‡¶â‡¶ö‡ßç‡¶ö ‡¶∞‡¶ï‡ßç‡¶§‡¶ö‡¶æ‡¶™ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£:**

**‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø‡¶æ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∏:**
‚Ä¢ ‡¶≤‡¶¨‡¶£ ‡¶ï‡¶Æ ‡¶ñ‡¶æ‡¶® (‡¶¶‡¶ø‡¶®‡ßá ‡ß´ ‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶ï‡¶Æ)
‚Ä¢ ‡¶§‡¶æ‡¶ú‡¶æ ‡¶´‡¶≤ ‡¶ì ‡¶∏‡¶¨‡¶ú‡¶ø ‡¶¨‡ßá‡¶∂‡¶ø ‡¶ñ‡¶æ‡¶®
‚Ä¢ ‡¶§‡ßá‡¶≤-‡¶ö‡¶∞‡ßç‡¶¨‡¶ø ‡¶ï‡¶Æ ‡¶ñ‡¶æ‡¶®

**‡¶ú‡ßÄ‡¶¨‡¶®‡¶Ø‡¶æ‡¶§‡ßç‡¶∞‡¶æ:**
‚Ä¢ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ ‡¶ß‡ßÇ‡¶Æ‡¶™‡¶æ‡¶® ‡¶ì ‡¶Æ‡¶¶‡ßç‡¶Ø‡¶™‡¶æ‡¶® ‡¶õ‡¶æ‡¶°‡¶º‡ßÅ‡¶®
‚Ä¢ ‡¶Æ‡¶æ‡¶®‡¶∏‡¶ø‡¶ï ‡¶ö‡¶æ‡¶™ ‡¶ï‡¶Æ‡¶æ‡¶®

**‡¶ì‡¶∑‡ßÅ‡¶ß:**
‚Ä¢ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶ñ‡¶æ‡¶®, ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ
‚Ä¢ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡¶è‡¶ï‡¶á ‡¶∏‡¶Æ‡¶Ø‡¶º‡ßá ‡¶ñ‡¶æ‡¶®`
  }
  
  // Default response for unrecognized queries
  return `ü©∫ **‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂:**

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶Ü‡¶∞‡ßã ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶ï‡¶∞‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶∞‡ßã ‡¶≠‡¶æ‡¶≤‡ßã ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡•§

**‡¶Ü‡¶Æ‡¶ø ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø:**
‚Ä¢ ‡¶∞‡ßã‡¶ó‡ßá‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡¶£ ‡¶ì ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ
‚Ä¢ ‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
‚Ä¢ ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§‡¶ï‡¶∞‡¶£
‚Ä¢ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø‡¶ï‡¶∞ ‡¶ú‡ßÄ‡¶¨‡¶®‡¶Ø‡¶æ‡¶§‡ßç‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂
‚Ä¢ ‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø

üí¨ **‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®:**
"‡¶ú‡ßç‡¶¨‡¶∞ ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø ‡¶ï‡¶∞‡¶¨?"
"‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶¨‡ßá‡¶ü‡¶ø‡¶∏ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£‡ßá‡¶∞ ‡¶â‡¶™‡¶æ‡¶Ø‡¶º?"
"‡¶¨‡ßÅ‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶•‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶ï‡ßá‡¶®?"

üì± ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡¶®: MediLens ‡¶è ‡¶™‡ßç‡¶∞‡ßá‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶™‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§`
}

// Helper function to identify common questions for caching
function isCommonQuestion(message) {
  const commonPatterns = [
    '‡¶ú‡ßç‡¶¨‡¶∞', 'fever', '‡¶Æ‡¶æ‡¶•‡¶æ‡¶¨‡ßç‡¶Ø‡¶•‡¶æ', 'headache', 
    '‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶¨‡ßá‡¶ü‡¶ø‡¶∏', 'diabetes', '‡¶∞‡¶ï‡ßç‡¶§‡¶ö‡¶æ‡¶™', 'pressure',
    '‡¶ï‡¶æ‡¶∂‡¶ø', 'cough', '‡¶™‡ßá‡¶ü', 'stomach', '‡¶¨‡ßç‡¶Ø‡¶•‡¶æ', 'pain'
  ]
  
  const lowerMessage = message.toLowerCase()
  return commonPatterns.some(pattern => lowerMessage.includes(pattern))
}
