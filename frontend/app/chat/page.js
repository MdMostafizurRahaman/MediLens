'use client'

import { useState, useRef, useEffect } from 'react'
import { motion } from 'framer-motion'
import { useAuth } from '@/lib/auth-context'
import { useRouter } from 'next/navigation'

export default function ChatPage() {
  const [messages, setMessages] = useState([])
  const [inputMessage, setInputMessage] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [loading, setLoading] = useState(true)
  const [chatHistory, setChatHistory] = useState([])
  const [selectedChatId, setSelectedChatId] = useState(null)
  const messagesEndRef = useRef(null)
  const { currentUser, getToken } = useAuth()
  const router = useRouter()

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    if (currentUser) {
      initializeChat()
    }
  }, [currentUser])

  const initializeChat = async () => {
    try {
      setLoading(true)
      await loadChatHistory()
      
      // Start with welcome message if no chat history
      if (messages.length === 0) {
        setMessages([{
          id: 'welcome-' + Date.now(),
          type: 'bot',
          content: 'ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо! ржЖржорж┐ MediLens ржПрж░ AI рж╕рж╣рж╛ржпрж╝ржХред ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп, ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржмрж╛ ржорзЗржбрж┐ржХрзНржпрж╛рж▓ ржкрзНрж░рж╢рзНржи ржХрж░рзБржиред ржЖржорж┐ ржмрж╛ржВрж▓рж╛ржпрж╝ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржкрж╛рж░рж┐ред ЁЯПеЁЯТК',
          timestamp: new Date()
        }])
      }
    } catch (error) {
      console.error('Error initializing chat:', error)
    } finally {
      setLoading(false)
    }
  }

  const loadChatHistory = async () => {
    try {
      const token = getToken()
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080/api'}/user/chat`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      })

      if (response.ok) {
        const chats = await response.json()
        setChatHistory(chats)
        
        // If there are existing chats, load the most recent one
        if (chats.length > 0) {
          const latestChat = chats[0]
          setSelectedChatId(latestChat.id)
          await loadChatMessages(latestChat.id)
        }
      }
    } catch (error) {
      console.error('Error loading chat history:', error)
    }
  }

  const loadChatMessages = async (chatId) => {
    try {
      const token = getToken()
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080/api'}/chat/${chatId}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      })

      if (response.ok) {
        const chatData = await response.json()
        const formattedMessages = chatData.messages?.map(msg => ({
          id: msg.id,
          type: msg.chatRole === 'USER' ? 'user' : 'bot',
          content: msg.content,
          timestamp: new Date(msg.timestamp || msg.createdAt)
        })) || []
        
        setMessages(formattedMessages)
      }
    } catch (error) {
      console.error('Error loading chat messages:', error)
    }
  }

  const createNewChat = async () => {
    try {
      const token = getToken()
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080/api'}/chat/new`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: 'ржирждрзБржи ржЪрзНржпрж╛ржЯ - ' + new Date().toLocaleDateString('bn-BD')
        }),
      })

      if (response.ok) {
        const newChat = await response.json()
        setSelectedChatId(newChat.id)
        setMessages([{
          id: 'welcome-' + Date.now(),
          type: 'bot',
          content: 'ржирждрзБржи ржЪрзНржпрж╛ржЯ рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗред ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп ржмрж┐рж╖ржпрж╝ржХ ржпрзЗржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи! ЁЯй║',
          timestamp: new Date()
        }])
        await loadChatHistory()
        return newChat.id
      }
    } catch (error) {
      console.error('Error creating new chat:', error)
    }
    return null
  }

  const sendMessageToBackend = async (message, chatId) => {
    try {
      const token = getToken()
      
      // Create message object
      const messageData = {
        content: message,
        role: 'USER'
      }
      
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080/api'}/chat/${chatId}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(messageData),
      })

      if (response.ok) {
        const chatResponse = await response.json()
        // The backend should return the updated chat with AI response
        // For now, we'll use local AI response
        return getLocalBotResponse(message)
      } else {
        console.warn('Backend chat failed, using local response')
        return getLocalBotResponse(message)
      }
    } catch (error) {
      console.error('Error sending message to backend:', error)
      return getLocalBotResponse(message)
    }
  }

  const handleSendMessage = async (e) => {
    e.preventDefault()
    if (!inputMessage.trim()) return

    const userMessage = {
      id: 'user-' + Date.now(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    const currentMessage = inputMessage
    setInputMessage('')
    setIsTyping(true)

    try {
      let currentChatId = selectedChatId
      
      // Create new chat if none exists
      if (!currentChatId) {
        currentChatId = await createNewChat()
      }

      // Send message to backend and get AI response
      const botResponseContent = await sendMessageToBackend(currentMessage, currentChatId)
      
      const botResponse = {
        id: 'bot-' + Date.now(),
        type: 'bot',
        content: botResponseContent,
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, botResponse])
      
      // Refresh chat history to show updated conversation
      await loadChatHistory()
      
    } catch (error) {
      console.error('Error handling message:', error)
      
      // Fallback to local response
      const fallbackResponse = {
        id: 'bot-' + Date.now(),
        type: 'bot',
        content: 'ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржПржЦржи рж╕ржВржпрзЛржЧрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ржпрж╝ ржжрзНрж░рзБржд ржбрж╛ржХрзНрждрж╛рж░рзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржиред',
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, fallbackResponse])
    } finally {
      setIsTyping(false)
    }
  }

  const getLocalBotResponse = (message) => {
    const lowerMessage = message.toLowerCase()
    
    // Enhanced medical responses in Bangla
    if (lowerMessage.includes('fever') || lowerMessage.includes('ржЬрзНржмрж░')) {
      return `ЁЯМбя╕П ржЬрзНржмрж░рзЗрж░ ржЬржирзНржп ржкрж░рж╛ржорж░рзНрж╢:
      
тАв ржкрзНржпрж╛рж░рж╛рж╕рж┐ржЯрж╛ржорж▓ рзлрзжрзж ржорж┐ржЧрзНрж░рж╛ - ржжрж┐ржирзЗ рзй ржмрж╛рж░ ржЦрж╛ржмрж╛рж░рзЗрж░ ржкрж░
тАв ржкрзНрж░ржЪрзБрж░ ржкрж╛ржирж┐ ржУ рждрж░рж▓ ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи
тАв ржмрж┐рж╢рзНрж░рж╛ржо ржирж┐ржи ржПржмржВ рж╣рж╛рж▓ржХрж╛ ржкрзЛрж╢рж╛ржХ ржкрж░рзБржи
тАв ржХрзБрж╕рзБржо ржЧрж░ржо ржкрж╛ржирж┐ ржжрж┐ржпрж╝рзЗ ржЧрзЛрж╕рж▓ ржХрж░рзБржи

тЪая╕П рж╕рждрж░рзНржХрждрж╛: ржЬрзНржмрж░ рззрзжрзй┬░F ржПрж░ ржмрзЗрж╢рж┐ рж╣рж▓рзЗ ржмрж╛ рзй ржжрж┐ржирзЗрж░ ржмрзЗрж╢рж┐ ржерж╛ржХрж▓рзЗ ржЕржмрж╢рзНржпржЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржиред`
    }
    
    if (lowerMessage.includes('pressure') || lowerMessage.includes('рж░ржХрзНрждржЪрж╛ржк') || lowerMessage.includes('hypertension')) {
      return `ЁЯй║ ржЙржЪрзНржЪ рж░ржХрзНрждржЪрж╛ржк ржирж┐ржпрж╝ржирзНрждрзНрж░ржг:
      
тАв ржирж┐ржпрж╝ржорж┐ржд ржУрж╖рзБржз ржЦрж╛ржи, ржмржирзНржз ржХрж░ржмрзЗржи ржирж╛
тАв рж▓ржмржг ржХржо ржЦрж╛ржи (ржжрж┐ржирзЗ рзл ржЧрзНрж░рж╛ржорзЗрж░ ржХржо)
тАв ржкрзНрж░рждрж┐ржжрж┐ржи рзйрзж ржорж┐ржирж┐ржЯ рж╣рж╛ржБржЯрж╛рж╣рж╛ржБржЯрж┐ ржХрж░рзБржи
тАв ржУржЬржи ржирж┐ржпрж╝ржирзНрждрзНрж░ржгрзЗ рж░рж╛ржЦрзБржи
тАв ржзрзВржоржкрж╛ржи ржУ ржоржжрзНржпржкрж╛ржи ржЫрж╛ржбрж╝рзБржи

ЁЯУК рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ рж░ржХрзНрждржЪрж╛ржк: рззрзирзж/рзорзж mmHg ржПрж░ ржирж┐ржЪрзЗ`
    }
    
    if (lowerMessage.includes('diabetes') || lowerMessage.includes('ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕') || lowerMessage.includes('sugar')) {
      return `ЁЯНО ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг:
      
тАв ржирж┐ржпрж╝ржорж┐ржд ржУрж╖рзБржз/ржЗржирж╕рзБрж▓рж┐ржи ржирж┐ржи
тАв ржЪрж┐ржирж┐, ржорж┐рж╖рзНржЯрж┐ ржУ ржнрж╛ржд ржХржо ржЦрж╛ржи
тАв ржмрзЗрж╢рж┐ рж╢рж╛ржХрж╕ржмржЬрж┐ ржУ ржЖржБрж╢ржпрзБржХрзНржд ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи
тАв ржирж┐ржпрж╝ржорж┐ржд ржмрзНржпрж╛ржпрж╝рж╛ржо ржХрж░рзБржи
тАв ржУржЬржи ржирж┐ржпрж╝ржирзНрждрзНрж░ржгрзЗ рж░рж╛ржЦрзБржи

ЁЯОп рж▓ржХрзНрж╖рзНржп: ржЦрж╛рж▓рж┐ ржкрзЗржЯрзЗ рзн mmol/L ржПрж░ ржирж┐ржЪрзЗ`
    }
    
    if (lowerMessage.includes('headache') || lowerMessage.includes('ржорж╛ржерж╛ржмрзНржпржерж╛')) {
      return `ЁЯза ржорж╛ржерж╛ржмрзНржпржерж╛рж░ рж╕ржорж╛ржзрж╛ржи:
      
тАв ржкрзНржпрж╛рж░рж╛рж╕рж┐ржЯрж╛ржорж▓ рзлрзжрзж ржорж┐ржЧрзНрж░рж╛ ржЦрзЗрждрзЗ ржкрж╛рж░рзЗржи
тАв ржкрж░рзНржпрж╛ржкрзНржд ржкрж╛ржирж┐ ржкрж╛ржи ржХрж░рзБржи (ржжрж┐ржирзЗ рзо-рззрзж ржЧрзНрж▓рж╛рж╕)
тАв ржЕржирзНржзржХрж╛рж░ ржШрж░рзЗ ржмрж┐рж╢рзНрж░рж╛ржо ржирж┐ржи
тАв ржорж╛ржерж╛ржпрж╝ ржарж╛ржирзНржбрж╛ рж╕рзЗржХ ржжрж┐ржи
тАв ржкрж░рзНржпрж╛ржкрзНржд ржШрзБржо ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи

тЪая╕П рждрзАржмрзНрж░ ржорж╛ржерж╛ржмрзНржпржерж╛, ржЬрзНржмрж░ ржмрж╛ ржжрзГрж╖рзНржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ ржЬрж░рзБрж░рж┐ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржиред`
    }

    if (lowerMessage.includes('cough') || lowerMessage.includes('ржХрж╛рж╢рж┐')) {
      return `ЁЯШ╖ ржХрж╛рж╢рж┐рж░ ржЪрж┐ржХрж┐рзОрж╕рж╛:
      
тАв ржХрзБрж╕рзБржо ржЧрж░ржо ржкрж╛ржирж┐рждрзЗ рж▓ржмржг ржжрж┐ржпрж╝рзЗ ржЧржбрж╝ржЧржбрж╝рж╛ ржХрж░рзБржи
тАв ржоржзрзБ ржУ ржЖржжрж╛рж░ рж░рж╕ ржЦрж╛ржи
тАв ржкрзНрж░ржЪрзБрж░ рждрж░рж▓ ржкрж╛ржи ржХрж░рзБржи
тАв ржзрзВржоржкрж╛ржи ржУ ржзрзБрж▓рж╛ржмрж╛рж▓рж┐ ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи

ЁЯТК ржУрж╖рзБржз: ржХрж╛рж╢рж┐рж░ рж╕рж┐рж░рж╛ржк (Dextromethorphan) ржЦрзЗрждрзЗ ржкрж╛рж░рзЗржиред
тЪая╕П рзи рж╕ржкрзНрждрж╛рж╣рзЗрж░ ржмрзЗрж╢рж┐ ржХрж╛рж╢рж┐ ржерж╛ржХрж▓рзЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржиред`
    }

    if (lowerMessage.includes('stomach') || lowerMessage.includes('ржкрзЗржЯ') || lowerMessage.includes('acidity')) {
      return `ЁЯН╜я╕П ржкрзЗржЯрзЗрж░ рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорж╛ржзрж╛ржи:
      
тАв ржирж┐ржпрж╝ржорж┐ржд ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи, ржмрзЗрж╢рж┐ ржЦрж╛рж▓рж┐ ржкрзЗржЯрзЗ ржерж╛ржХржмрзЗржи ржирж╛
тАв рждрзЗрж▓-ржорж╕рж▓рж╛ ржХржо ржЦрж╛ржи
тАв ржУржорж┐ржкрзНрж░рж╛ржЬрж▓ рзирзж ржорж┐ржЧрзНрж░рж╛ ржЦрж╛рж▓рж┐ ржкрзЗржЯрзЗ ржЦрзЗрждрзЗ ржкрж╛рж░рзЗржи
тАв ржкрзНрж░ржЪрзБрж░ ржкрж╛ржирж┐ ржкрж╛ржи ржХрж░рзБржи
тАв ржЪрж╛-ржХржлрж┐ ржХржо ржкрж╛ржи ржХрж░рзБржи

ЁЯЪи рждрзАржмрзНрж░ ржкрзЗржЯ ржмрзНржпржерж╛, ржмржорж┐ ржмрж╛ рж░ржХрзНржд ржЖрж╕рж▓рзЗ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржиред`
    }
    
    return `ржзржирзНржпржмрж╛ржж ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЬржирзНржпред ржЖрж░рзЛ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЙржкрж╕рж░рзНржЧ ржмрж╛ рж░рзЛржЧрзЗрж░ ржирж╛ржо ржмрж▓рж▓рзЗ ржЖржорж┐ ржЖрж░рзЛ ржнрж╛рж▓рзЛ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░ржмред

ЁЯФН ржЖржкржирж┐ ржЪрж╛ржЗрж▓рзЗ:
тАв ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржЖржкрж▓рзЛржб ржХрж░рзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рждрзЗ ржкрж╛рж░рзЗржи
тАв ржнрж╛ржЗржЯрж╛рж▓ рж╕рж╛ржЗржи ржЪрзЗржХ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи  
тАв ржбрж╛ржХрзНрждрж╛рж░ржжрзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрждрзЗ ржкрж╛рж░рзЗржи

тЪХя╕П ржоржирзЗ рж░рж╛ржЦржмрзЗржи: ржПржЯрж┐ ржкрзНрж░рж╛ржержорж┐ржХ ржкрж░рж╛ржорж░рзНрж╢ред ржЧрзБрж░рзБрждрж░ рж╕ржорж╕рзНржпрж╛ржпрж╝ ржЕржмрж╢рзНржпржЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржиред`
  }

  const quickQuestions = [
    'ржЬрзНржмрж░ рж╣рж▓рзЗ ржХрж┐ ржХрж░ржм?',
    'рж░ржХрзНрждржЪрж╛ржк ржмрзЗрж╢рж┐ рж╣рж▓рзЗ ржХрж┐ ржЦрж╛ржм?',
    'ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕ ржХржирзНржЯрзНрж░рзЛрж▓ ржХрж░рж╛рж░ ржЙржкрж╛ржпрж╝?',
    'ржорж╛ржерж╛ржмрзНржпржерж╛рж░ ржУрж╖рзБржз ржХрж┐?',
    'ржкрзЗржЯ ржмрзНржпржерж╛рж░ ржХрж╛рж░ржг ржХрж┐?',
    'ржХрж╛рж╢рж┐рж░ ржШрж░рзЛржпрж╝рж╛ ржЪрж┐ржХрж┐рзОрж╕рж╛',
    'рж╣рж╛рж░рзНржЯрзЗрж░ рж╕ржорж╕рзНржпрж╛рж░ рж▓ржХрзНрж╖ржг',
    'ржПрж╕рж┐ржбрж┐ржЯрж┐рж░ рж╕ржорж╛ржзрж╛ржи'
  ]

  if (!currentUser) {
    return (
      <div className="min-h-screen bg-base-100 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">Please log in to chat</h1>
          <a href="/auth/login" className="btn btn-primary">Login</a>
        </div>
      </div>
    )
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-base-100 flex items-center justify-center">
        <div className="text-center">
          <span className="loading loading-spinner loading-lg"></span>
          <p className="mt-4">Loading your chat...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-base-100">
      <div className="container mx-auto max-w-6xl h-screen flex">
        {/* Sidebar - Chat History */}
        <div className="w-1/4 bg-base-200 border-r">
          <div className="p-4 border-b">
            <button 
              onClick={createNewChat}
              className="btn btn-primary btn-sm w-full"
            >
              тЮХ ржирждрзБржи ржЪрзНржпрж╛ржЯ
            </button>
          </div>
          <div className="overflow-y-auto h-full">
            {chatHistory.map((chat) => (
              <div
                key={chat.id}
                className={`p-3 border-b cursor-pointer hover:bg-base-300 ${
                  selectedChatId === chat.id ? 'bg-base-300' : ''
                }`}
                onClick={() => {
                  setSelectedChatId(chat.id)
                  loadChatMessages(chat.id)
                }}
              >
                <h4 className="text-sm font-medium truncate">
                  {chat.title || 'Chat ' + chat.id}
                </h4>
                <p className="text-xs text-base-content/60">
                  {new Date(chat.createdAt).toLocaleDateString('bn-BD')}
                </p>
              </div>
            ))}
          </div>
        </div>

        {/* Main Chat Area */}
        <div className="flex-1 flex flex-col">
          {/* Header */}
          <motion.div 
            className="bg-primary text-primary-content p-4"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            <div className="flex items-center justify-between">
              <button 
                onClick={() => router.back()} 
                className="btn btn-ghost btn-circle text-primary-content"
              >
                тЖР Back
              </button>
              <div className="text-center">
                <h1 className="text-2xl font-bold">ЁЯдЦ MediLens AI Assistant</h1>
                <p className="text-primary-content/80">ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп ржмрж┐рж╖ржпрж╝ржХ рж╕рж╣рж╛ржпрж╝ржХ</p>
              </div>
              <div></div>
            </div>
          </motion.div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 bg-base-100">
            <div className="space-y-4">
              {messages.map((message) => (
                <motion.div
                  key={message.id}
                  className={`chat ${message.type === 'user' ? 'chat-end' : 'chat-start'}`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="chat-image avatar">
                    <div className="w-10 rounded-full">
                      {message.type === 'user' ? (
                        <div className="w-10 h-10 rounded-full bg-primary flex items-center justify-center text-primary-content font-bold">
                          {currentUser?.firstName?.[0] || 'U'}
                        </div>
                      ) : (
                        <div className="w-10 h-10 rounded-full bg-secondary flex items-center justify-center text-secondary-content">
                          ЁЯдЦ
                        </div>
                      )}
                    </div>
                  </div>
                  <div className="chat-header">
                    {message.type === 'user' ? `${currentUser?.firstName || 'You'}` : 'MediLens AI'}
                    <time className="text-xs opacity-50 ml-2">
                      {message.timestamp.toLocaleTimeString('bn-BD')}
                    </time>
                  </div>
                  <div className={`chat-bubble ${message.type === 'user' ? 'chat-bubble-primary' : 'chat-bubble-secondary'} whitespace-pre-line`}>
                    {message.content}
                  </div>
                </motion.div>
              ))}
              
              {isTyping && (
                <motion.div
                  className="chat chat-start"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="chat-image avatar">
                    <div className="w-10 rounded-full bg-secondary flex items-center justify-center text-secondary-content">
                      ЁЯдЦ
                    </div>
                  </div>
                  <div className="chat-bubble chat-bubble-secondary">
                    <span className="loading loading-dots loading-sm"></span>
                    <span className="ml-2">ржЪрж┐ржирзНрждрж╛ ржХрж░ржЫрж┐...</span>
                  </div>
                </motion.div>
              )}
              <div ref={messagesEndRef} />
            </div>
          </div>

          {/* Quick Questions */}
          <div className="p-4 bg-base-200 border-t">
            <p className="text-sm text-base-content/70 mb-2">ржжрзНрж░рзБржд ржкрзНрж░рж╢рзНржи:</p>
            <div className="flex flex-wrap gap-2">
              {quickQuestions.map((question, index) => (
                <button
                  key={index}
                  className="btn btn-xs btn-outline"
                  onClick={() => setInputMessage(question)}
                  disabled={isTyping}
                >
                  {question}
                </button>
              ))}
            </div>
          </div>

          {/* Input */}
          <form onSubmit={handleSendMessage} className="p-4 bg-base-200">
            <div className="flex gap-2">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                placeholder="ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп ржмрж┐рж╖ржпрж╝ржХ ржкрзНрж░рж╢рзНржи рж▓рж┐ржЦрзБржи... (ржмрж╛ржВрж▓рж╛ ржмрж╛ ржЗржВрж░рзЗржЬрж┐рждрзЗ)"
                className="input input-bordered flex-1"
                disabled={isTyping}
              />
              <button
                type="submit"
                className={`btn btn-primary ${isTyping ? 'loading' : ''}`}
                disabled={!inputMessage.trim() || isTyping}
              >
                {isTyping ? 'ржкрж╛ржарж╛ржЪрзНржЫрж┐...' : 'ЁЯУд Send'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}
