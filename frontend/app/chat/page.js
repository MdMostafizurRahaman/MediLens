'use client'

import { useState, useRef, useEffect } from 'react'
import { motion } from 'framer-motion'
import { useAuth } from '@/lib/auth-context'
import { useRouter } from 'next/navigation'

export default function ChatPage() {
  const [messages, setMessages] = useState([])
  const [inputMessage, setInputMessage] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [loading, setLoading] = useState(true)
  const [chatHistory, setChatHistory] = useState([])
  const [selectedChatId, setSelectedChatId] = useState(null)
  const messagesEndRef = useRef(null)
  const { currentUser, getToken } = useAuth()
  const router = useRouter()

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    if (currentUser) {
      initializeChat()
    }
  }, [currentUser])

  const initializeChat = async () => {
    try {
      setLoading(true)
      await loadChatHistory()
      
      // Start with welcome message if no chat history
      if (messages.length === 0) {
        setMessages([{
          id: 'welcome-' + Date.now(),
          type: 'bot',
          content: 'ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо! ржЖржорж┐ MediLens ржПрж░ AI рж╕рж╣рж╛ржпрж╝ржХред ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп, ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржмрж╛ ржорзЗржбрж┐ржХрзНржпрж╛рж▓ ржкрзНрж░рж╢рзНржи ржХрж░рзБржиред ржЖржорж┐ ржмрж╛ржВрж▓рж╛ржпрж╝ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржкрж╛рж░рж┐ред ЁЯПеЁЯТК',
          timestamp: new Date()
        }])
      }
    } catch (error) {
      console.error('Error initializing chat:', error)
    } finally {
      setLoading(false)
    }
  }

  const loadChatHistory = async () => {
    try {
      const token = getToken()
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080/api'}/user/chat`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      })

      if (response.ok) {
        const chats = await response.json()
        setChatHistory(chats)
        
        // If there are existing chats, load the most recent one
        if (chats.length > 0) {
          const latestChat = chats[0]
          setSelectedChatId(latestChat.id)
          await loadChatMessages(latestChat.id)
        }
      }
    } catch (error) {
      console.error('Error loading chat history:', error)
    }
  }

  const loadChatMessages = async (chatId) => {
    try {
      const token = getToken()
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080/api'}/chat/${chatId}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      })

      if (response.ok) {
        const chatData = await response.json()
        const formattedMessages = chatData.messages?.map(msg => ({
          id: msg.id,
          type: msg.chatRole === 'USER' ? 'user' : 'bot',
          content: msg.content,
          timestamp: new Date(msg.timestamp || msg.createdAt)
        })) || []
        
        setMessages(formattedMessages)
      }
    } catch (error) {
      console.error('Error loading chat messages:', error)
    }
  }

  const createNewChat = async () => {
    try {
      const token = getToken()
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080/api'}/chat/new`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: 'ржирждрзБржи ржЪрзНржпрж╛ржЯ - ' + new Date().toLocaleDateString('bn-BD')
        }),
      })

      if (response.ok) {
        const newChat = await response.json()
        setSelectedChatId(newChat.id)
        setMessages([{
          id: 'welcome-' + Date.now(),
          type: 'bot',
          content: 'ржирждрзБржи ржЪрзНржпрж╛ржЯ рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗред ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп ржмрж┐рж╖ржпрж╝ржХ ржпрзЗржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи! ЁЯй║',
          timestamp: new Date()
        }])
        await loadChatHistory()
        return newChat.id
      }
    } catch (error) {
      console.error('Error creating new chat:', error)
    }
    return null
  }

  const sendMessageToBackend = async (message, chatId) => {
    try {
      const token = getToken()
      
      // First try the enhanced medical AI
      const medicalAIResponse = await fetch('/api/medical-chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: message,
          chatHistory: messages.slice(-10) // Send last 10 messages for context
        })
      })

      if (medicalAIResponse.ok) {
        const aiResult = await medicalAIResponse.json()
        if (aiResult.success && aiResult.response) {
          // Save to backend chat history
          try {
            const messageData = {
              content: message,
              role: 'USER'
            }
            
            await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080/api'}/chat/${chatId}`, {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(messageData),
            })
          } catch (backendError) {
            console.log('Backend chat save failed, continuing with AI response')
          }
          
          return aiResult.response
        }
      }
      
      // Fallback to backend if AI fails
      const messageData = {
        content: message,
        role: 'USER'
      }
      
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080/api'}/chat/${chatId}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(messageData),
      })

      if (response.ok) {
        const chatResponse = await response.json()
        return chatResponse.botResponse || getEnhancedLocalResponse(message)
      } else {
        return getEnhancedLocalResponse(message)
      }
    } catch (error) {
      console.error('Error sending message:', error)
      return getEnhancedLocalResponse(message)
    }
  }

  const handleSendMessage = async (e) => {
    e.preventDefault()
    if (!inputMessage.trim()) return

    const userMessage = {
      id: 'user-' + Date.now(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    const currentMessage = inputMessage
    setInputMessage('')
    setIsTyping(true)

    try {
      let currentChatId = selectedChatId
      
      // Create new chat if none exists
      if (!currentChatId) {
        currentChatId = await createNewChat()
      }

      // Send message to backend and get AI response
      const botResponseContent = await sendMessageToBackend(currentMessage, currentChatId)
      
      const botResponse = {
        id: 'bot-' + Date.now(),
        type: 'bot',
        content: botResponseContent,
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, botResponse])
      
      // Refresh chat history to show updated conversation
      await loadChatHistory()
      
    } catch (error) {
      console.error('Error handling message:', error)
      
      // Fallback to local response
      const fallbackResponse = {
        id: 'bot-' + Date.now(),
        type: 'bot',
        content: 'ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржПржЦржи рж╕ржВржпрзЛржЧрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ржпрж╝ ржжрзНрж░рзБржд ржбрж╛ржХрзНрждрж╛рж░рзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржиред',
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, fallbackResponse])
    } finally {
      setIsTyping(false)
    }
  }

  const getEnhancedLocalResponse = (message) => {
    const lowerMessage = message.toLowerCase()
    
    // Emergency detection
    const emergencyKeywords = [
      'chest pain', 'difficulty breathing', 'unconscious', 'severe bleeding',
      'ржмрзБржХрзЗ ржмрзНржпржерж╛', 'рж╢рзНржмрж╛рж╕ ржирж┐рждрзЗ ржХрж╖рзНржЯ', 'ржЕржЬрзНржЮрж╛ржи', 'рж░ржХрзНрждржХрзНрж╖рж░ржг', 'heart attack', 'stroke'
    ]
    
    if (emergencyKeywords.some(keyword => lowerMessage.includes(keyword))) {
      return `ЁЯЪи **ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ рж╕ржирж╛ржХрзНржд ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!**

ржЕржмрж┐рж▓ржорзНржмрзЗ ржирж┐ржХржЯрж╕рзНрже рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗрж░ ржЬрж░рзБрж░рж┐ ржмрж┐ржнрж╛ржЧрзЗ ржпрж╛ржи ржмрж╛ ржЬрж░рзБрж░рж┐ рж╕рзЗржмрж╛ржпрж╝ ржХрж▓ ржХрж░рзБржи:
ЁЯУЮ рзпрзпрзп (ржЬрж╛рждрзАржпрж╝ ржЬрж░рзБрж░рж┐ рж╕рзЗржмрж╛)
ЁЯУЮ рззрзмрзирзмрзй (ржврж╛ржХрж╛ ржорзЗржбрж┐ржХрзЗрж▓ ржХрж▓рзЗржЬ)

ЁЯПе **рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржХрж░ржгрзАржпрж╝:**
тАв рж░рзЛржЧрзАржХрзЗ ржЖрж░рж╛ржоржжрж╛ржпрж╝ржХ ржЕржмрж╕рзНржерж╛ржирзЗ рж░рж╛ржЦрзБржи
тАв рж╢рзНржмрж╛рж╕-ржкрзНрж░рж╢рзНржмрж╛рж╕рзЗрж░ ржжрж┐ржХрзЗ ржиржЬрж░ рж░рж╛ржЦрзБржи  
тАв ржЬрзНржЮрж╛ржи рж╣рж╛рж░рж╛рж▓рзЗ ржкрж╛рж╢рзЗ рж╢рзБржЗржпрж╝рзЗ ржжрж┐ржи
тАв ржХрзЛржирзЛ ржУрж╖рзБржз ржирж╛ ржжрж┐ржпрж╝рзЗ ржжрзНрж░рзБржд рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржирж┐ржи

тЪая╕П **ржмрж┐рж▓ржорзНржм ржХрж░ржмрзЗржи ржирж╛ - ржЬрзАржмржи ржЭрзБржБржХрж┐рждрзЗ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ!**`
    }
    
    // Enhanced medical responses
    if (lowerMessage.includes('fever') || lowerMessage.includes('ржЬрзНржмрж░')) {
      return `ЁЯМбя╕П **ржЬрзНржмрж░рзЗрж░ рж╕ржорзНржкрзВрж░рзНржг ржЪрж┐ржХрж┐рзОрж╕рж╛:**

**рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржЪрж┐ржХрж┐рзОрж╕рж╛:**
тАв ржкрзНржпрж╛рж░рж╛рж╕рж┐ржЯрж╛ржорж▓ рзлрзжрзж ржорж┐ржЧрзНрж░рж╛ - ржкрзНрж░рждрж┐ рзм-рзо ржШржирзНржЯрж╛ржпрж╝ (рж╕рж░рзНржмрзЛржЪрзНржЪ ржжрж┐ржирзЗ рзк ржмрж╛рж░)
тАв ржЗржмрзБржкрзНрж░рзЛржлрзЗржи рзкрзжрзж ржорж┐ржЧрзНрж░рж╛ - ржпржжрж┐ ржкрзНржпрж╛рж░рж╛рж╕рж┐ржЯрж╛ржорж▓ ржХрж╛ржЬ ржирж╛ ржХрж░рзЗ
тАв ржкрзНрж░ржЪрзБрж░ ржкрж╛ржирж┐, ржбрж╛ржмрзЗрж░ ржкрж╛ржирж┐, рж╕рзНржпрж╛рж▓рж╛ржЗржи ржЦрж╛ржи (ржжрж┐ржирзЗ рзй-рзк рж▓рж┐ржЯрж╛рж░)

**ржШрж░рзЛржпрж╝рж╛ ржЪрж┐ржХрж┐рзОрж╕рж╛:**
тАв ржХрзБрж╕рзБржо ржЧрж░ржо ржкрж╛ржирж┐рждрзЗ ржЧрзЛрж╕рж▓ ржХрж░рзБржи
тАв рж╣рж╛рж▓ржХрж╛ рж╕рзБрждрж┐рж░ ржХрж╛ржкржбрж╝ ржкрж░рзБржи
тАв ржШрж░ ржарж╛ржирзНржбрж╛ рж░рж╛ржЦрзБржи, ржлрзНржпрж╛ржи ржЪрж╛рж▓рж╛ржи
тАв ржмрж┐рж╢рзНрж░рж╛ржо ржирж┐ржи, ржХрж╛ржЬржХрж░рзНржо ржмржирзНржз рж░рж╛ржЦрзБржи

**ржЦрж╛ржмрж╛рж░:**
тАв рждрж░рж▓ ржЦрж╛ржмрж╛рж░ ржмрзЗрж╢рж┐ ржЦрж╛ржи
тАв ржлрж▓рзЗрж░ рж░рж╕, рж╕рзНржпрзБржк, ржЦрж┐ржЪрзБржбрж╝рж┐
тАв ржорж╕рж▓рж╛ржжрж╛рж░ ржУ ржнрж╛ржЬрж╛ржкрзЛржбрж╝рж╛ ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи

ЁЯЪи **ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи ржпржжрж┐:**
тАв ржЬрзНржмрж░ рззрзжрзй┬░F (рзйрзп.рзк┬░C) ржПрж░ ржмрзЗрж╢рж┐ рж╣ржпрж╝
тАв рзй ржжрж┐ржирзЗрж░ ржмрзЗрж╢рж┐ рж╕рзНржерж╛ржпрж╝рзА рж╣ржпрж╝
тАв рж╢рзНржмрж╛рж╕ ржХрж╖рзНржЯ, ржмрзБржХрзЗ ржмрзНржпржерж╛ ржмрж╛ рждрзАржмрзНрж░ ржорж╛ржерж╛ржмрзНржпржерж╛ рж╣ржпрж╝
тАв ржмржорж┐ ржмрж╛ ржбрж╛ржпрж╝рж░рж┐ржпрж╝рж╛ рж╕ржЩрзНржЧрзЗ ржерж╛ржХрзЗ`
    }
    
    if (lowerMessage.includes('pressure') || lowerMessage.includes('рж░ржХрзНрждржЪрж╛ржк') || lowerMessage.includes('hypertension')) {
      return `ЁЯй║ **ржЙржЪрзНржЪ рж░ржХрзНрждржЪрж╛ржк рж╕ржорзНржкрзВрж░рзНржг ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛:**

**ржУрж╖рзБржз ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛:**
тАв ржирж┐ржпрж╝ржорж┐ржд ржУрж╖рзБржз ржЦрж╛ржи - ржХржЦржирзЛ ржмржирзНржз ржХрж░ржмрзЗржи ржирж╛
тАв ржкрзНрж░рждрж┐ржжрж┐ржи ржПржХржЗ рж╕ржоржпрж╝рзЗ ржЦрж╛ржи
тАв ржУрж╖рзБржз рж╢рзЗрж╖ рж╣ржУржпрж╝рж╛рж░ ржЖржЧрзЗржЗ ржирждрзБржи ржирж┐ржи

**ржЦрж╛ржжрзНржп ржирж┐ржпрж╝ржирзНрждрзНрж░ржг:**
тАв рж▓ржмржг ржХржарзЛрж░ржнрж╛ржмрзЗ ржХржорж╛ржи (ржжрж┐ржирзЗ рзл ржЧрзНрж░рж╛ржорзЗрж░ ржХржо)
тАв ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржЬрж╛ржд ржЦрж╛ржмрж╛рж░ ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи
тАв ржХрж▓рж╛, ржХржорж▓рж╛, ржкрзЗржБржкрзЗ, рж╢рж╛ржХрж╕ржмржЬрж┐ ржмрзЗрж╢рж┐ ржЦрж╛ржи
тАв ржорж╛ржЫ, ржбрж╛рж▓, ржмрж╛ржжрж╛ржо ржЦрж╛ржи

**ржЬрзАржмржиржпрж╛рждрзНрж░рж╛:**
тАв ржкрзНрж░рждрж┐ржжрж┐ржи рзйрзж-рзкрзл ржорж┐ржирж┐ржЯ ржжрзНрж░рзБржд рж╣рж╛ржБржЯрзБржи
тАв ржУржЬржи ржирж┐ржпрж╝ржирзНрждрзНрж░ржгрзЗ рж░рж╛ржЦрзБржи
тАв ржзрзВржоржкрж╛ржи ржУ ржоржжрзНржпржкрж╛ржи рж╕ржорзНржкрзВрж░рзНржг ржЫрж╛ржбрж╝рзБржи
тАв ржорж╛ржирж╕рж┐ржХ ржЪрж╛ржк ржХржорж╛ржи - ржпрзЛржЧржмрзНржпрж╛ржпрж╝рж╛ржо/ржорзЗржбрж┐ржЯрзЗрж╢ржи

**ржирж┐ржпрж╝ржорж┐ржд ржкрж░рзАржХрзНрж╖рж╛:**
тАв рж╕ржкрзНрждрж╛рж╣рзЗ рзи-рзй ржмрж╛рж░ BP ржорж╛ржкрзБржи
тАв ржорж╛рж╕рзЗ рзз ржмрж╛рж░ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи
тАв ржмржЫрж░рзЗ рзи ржмрж╛рж░ ECG ржУ рж░ржХрзНржд ржкрж░рзАржХрзНрж╖рж╛

ЁЯУК **рж▓ржХрзНрж╖рзНржп:** рззрзйрзж/рзорзж mmHg ржПрж░ ржирж┐ржЪрзЗ рж░рж╛ржЦрзБржи`
    }
    
    if (lowerMessage.includes('diabetes') || lowerMessage.includes('ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕') || lowerMessage.includes('sugar')) {
      return `ЁЯНО **ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕ рж╕ржорзНржкрзВрж░рзНржг ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛:**

**ржУрж╖рзБржз ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛:**
тАв ржорзЗржЯржлрж░ржорж┐ржи - ржЦрж╛ржмрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ ржмрж╛ ржкрж░рзЗ ржЦрж╛ржи
тАв ржЗржирж╕рзБрж▓рж┐ржи - ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╕ржоржпрж╝рзЗ ржирж┐ржи
тАв ржХржЦржирзЛ ржУрж╖рзБржз ржмрж╛ржж ржжрзЗржмрзЗржи ржирж╛

**ржЦрж╛ржжрзНржп ржкрж░рж┐ржХрж▓рзНржкржирж╛:**
тАв ржЪрж┐ржирж┐, ржорж┐рж╖рзНржЯрж┐, ржХрзЛржорж▓ ржкрж╛ржирзАржпрж╝ рж╕ржорзНржкрзВрж░рзНржг ржмржирзНржз
тАв ржнрж╛ржд ржХржо, рж░рзБржЯрж┐ ржмрзЗрж╢рж┐ ржЦрж╛ржи
тАв рж╢рж╛ржХрж╕ржмржЬрж┐, рж╕рж╛рж▓рж╛ржж ржкрзНрж░рждрж┐ ржмрзЗрж▓рж╛ржпрж╝
тАв ржЫрзЛржЯ ржкрзНрж▓рзЗржЯрзЗ ржЦрж╛ржи, ржзрзАрж░рзЗ ржзрзАрж░рзЗ ржЪрж┐ржмрж┐ржпрж╝рзЗ ржЦрж╛ржи

**ржирж┐ржпрж╝ржорж┐ржд ржмрзНржпрж╛ржпрж╝рж╛ржо:**
тАв ржкрзНрж░рждрж┐ржжрж┐ржи рзкрзл ржорж┐ржирж┐ржЯ рж╣рж╛ржБржЯрзБржи
тАв ржЦрж╛ржмрж╛рж░рзЗрж░ рзйрзж ржорж┐ржирж┐ржЯ ржкрж░ рж╣рж╛ржБржЯрзБржи
тАв рж╕рж╛ржЗржХрзНрж▓рж┐ржВ, рж╕рж╛ржБрждрж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи

**ржирж┐ржпрж╝ржорж┐ржд ржкрж░рзАржХрзНрж╖рж╛:**
тАв ржорж╛рж╕рзЗ рзи ржмрж╛рж░ рж░ржХрзНрждрзЗрж░ ржЧрзНрж▓рзБржХрзЛржЬ
тАв рзй ржорж╛рж╕рзЗ рзз ржмрж╛рж░ HbA1c (рзн% ржПрж░ ржирж┐ржЪрзЗ)
тАв ржмржЫрж░рзЗ рзи ржмрж╛рж░ ржЪрзЛржЦ ржУ ржХрж┐ржбржирж┐ ржЪрзЗржХржЖржк

ЁЯОп **рж▓ржХрзНрж╖рзНржп:** ржЦрж╛рж▓рж┐ ржкрзЗржЯрзЗ рзл.рзм-рзн.рзж mmol/L`
    }
    
    if (lowerMessage.includes('headache') || lowerMessage.includes('ржорж╛ржерж╛ржмрзНржпржерж╛')) {
      return `ЁЯза **ржорж╛ржерж╛ржмрзНржпржерж╛рж░ рж╕ржорзНржкрзВрж░рзНржг ржЪрж┐ржХрж┐рзОрж╕рж╛:**

**рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржЪрж┐ржХрж┐рзОрж╕рж╛:**
тАв ржкрзНржпрж╛рж░рж╛рж╕рж┐ржЯрж╛ржорж▓ рзлрзжрзж ржорж┐ржЧрзНрж░рж╛ - рзм ржШржирзНржЯрж╛ ржкрж░ ржкрж░
тАв ржЕржирзНржзржХрж╛рж░ ржШрж░рзЗ рж╢рзБржпрж╝рзЗ ржерж╛ржХрзБржи
тАв ржорж╛ржерж╛ржпрж╝ ржарж╛ржирзНржбрж╛ ржкрж╛ржирж┐рж░ ржкржЯрзНржЯрж┐ ржжрж┐ржи
тАв ржШрж╛ржбрж╝ ржУ ржХрж╛ржБржз ржорж╛рж▓рж┐рж╢ ржХрж░рзБржи

**ржХрж╛рж░ржг ржЕржирзБржпрж╛ржпрж╝рзА ржЪрж┐ржХрж┐рзОрж╕рж╛:**
тАв **ржЯрзЗржирж╢ржирзЗрж░ ржорж╛ржерж╛ржмрзНржпржерж╛:** рж░рж┐рж▓рж╛ржХрзНрж╕рзЗрж╢ржи, ржЧржнрзАрж░ рж╢рзНржмрж╛рж╕
тАв **ржорж╛ржЗржЧрзНрж░рзЗржЗржи:** ржЕржирзНржзржХрж╛рж░ ржШрж░рзЗ ржмрж┐рж╢рзНрж░рж╛ржо, рж╕рзБржорж╛ржЯрзНрж░рж┐ржкржЯрж╛ржи
тАв **рж╕рж╛ржЗржирж╛рж╕рзЗрж░ ржорж╛ржерж╛ржмрзНржпржерж╛:** ржЧрж░ржо ржкрж╛ржирж┐рж░ ржнрж╛ржк ржирж┐ржи

**ржкрзНрж░рждрж┐рж░рзЛржз:**
тАв ржкрж░рзНржпрж╛ржкрзНржд ржкрж╛ржирж┐ ржкрж╛ржи ржХрж░рзБржи (ржжрж┐ржирзЗ рзо-рззрзж ржЧрзНрж▓рж╛рж╕)
тАв ржирж┐ржпрж╝ржорж┐ржд ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи, ржЦрж╛рж▓рж┐ ржкрзЗржЯрзЗ ржерж╛ржХржмрзЗржи ржирж╛
тАв рзн-рзо ржШржирзНржЯрж╛ ржШрзБржорж╛ржи
тАв ржЪрзЛржЦрзЗрж░ ржкрж╛ржУржпрж╝рж╛рж░ ржЪрзЗржХ ржХрж░рж╛ржи

ЁЯЪи **рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи:**
тАв рж╣ржарж╛рзО рждрзАржмрзНрж░ ржорж╛ржерж╛ржмрзНржпржерж╛
тАв ржЬрзНржмрж░ ржУ ржШрж╛ржбрж╝ рж╢ржХрзНржд рж╣ржУржпрж╝рж╛
тАв ржжрзГрж╖рзНржЯрж┐ ржЭрж╛ржкрж╕рж╛ ржмрж╛ ржХржерж╛ ржЬржбрж╝рж┐ржпрж╝рзЗ ржпрж╛ржУржпрж╝рж╛`
    }

    if (lowerMessage.includes('cough') || lowerMessage.includes('ржХрж╛рж╢рж┐')) {
      return `ЁЯШ╖ **ржХрж╛рж╢рж┐рж░ рж╕ржорзНржкрзВрж░рзНржг ржЪрж┐ржХрж┐рзОрж╕рж╛:**

**ржШрж░рзЛржпрж╝рж╛ ржЪрж┐ржХрж┐рзОрж╕рж╛:**
тАв ржоржзрзБ рзз ржЪрж╛ржоржЪ + ржЖржжрж╛рж░ рж░рж╕ рзз ржЪрж╛ржоржЪ - ржжрж┐ржирзЗ рзй ржмрж╛рж░
тАв ржХрзБрж╕рзБржо ржЧрж░ржо ржкрж╛ржирж┐рждрзЗ рж▓ржмржг ржжрж┐ржпрж╝рзЗ ржЧржбрж╝ржЧржбрж╝рж╛
тАв рждрзБрж▓рж╕рзА ржкрж╛рждрж╛рж░ рж░рж╕ + ржоржзрзБ
тАв ржЖржжрж╛-рж▓рзЗржмрзБ-ржоржзрзБрж░ ржЪрж╛

**ржУрж╖рзБржз:**
тАв рж╢рзБржХржирзЛ ржХрж╛рж╢рж┐: ржбрзЗржХрзНрж╕ржЯрзНрж░рзЛржорзЗржерж░ржлрзЗржи рж╕рж┐рж░рж╛ржк
тАв ржХржлржпрзБржХрзНржд ржХрж╛рж╢рж┐: ржмрзНрж░рзЛржорж╣рзЗржХрзНрж╕рж┐ржи рж╕рж┐рж░рж╛ржк
тАв ржЕрзНржпрж╛рж▓рж╛рж░рзНржЬрж┐ржХ ржХрж╛рж╢рж┐: рж╕рзЗржЯрж┐рж░рж┐ржЬрж┐ржи рззрзж ржорж┐ржЧрзНрж░рж╛

**ржЬрзАржмржиржпрж╛рждрзНрж░рж╛:**
тАв ржкрзНрж░ржЪрзБрж░ рждрж░рж▓ ржкрж╛ржи ржХрж░рзБржи
тАв ржзрзВржоржкрж╛ржи ржУ ржзрзБрж▓рж╛ржмрж╛рж▓рж┐ ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи
тАв рж╣рж┐ржЙржорж┐ржбрж┐ржлрж╛ржпрж╝рж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
тАв ржорж╛ржерж╛ ржЙржБржЪрзБ ржХрж░рзЗ ржШрзБржорж╛ржи

ЁЯЪи **ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи ржпржжрж┐:**
тАв рзи рж╕ржкрзНрждрж╛рж╣рзЗрж░ ржмрзЗрж╢рж┐ ржХрж╛рж╢рж┐
тАв ржХржлрзЗрж░ рж╕рж╛ржерзЗ рж░ржХрзНржд
тАв рж╢рзНржмрж╛рж╕ ржХрж╖рзНржЯ ржмрж╛ ржмрзБржХрзЗ ржмрзНржпржерж╛
тАв ржЬрзНржмрж░ ржУ ржУржЬржи ржХржорзЗ ржпрж╛ржУржпрж╝рж╛`
    }

    if (lowerMessage.includes('stomach') || lowerMessage.includes('ржкрзЗржЯ') || lowerMessage.includes('acidity')) {
      return `ЁЯН╜я╕П **ржкрзЗржЯрзЗрж░ рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорзНржкрзВрж░рзНржг рж╕ржорж╛ржзрж╛ржи:**

**ржЧрзНржпрж╛рж╕рзНржЯрзНрж░рж┐ржХ/ржПрж╕рж┐ржбрж┐ржЯрж┐:**
тАв ржУржорж┐ржкрзНрж░рж╛ржЬрж▓ рзирзж ржорж┐ржЧрзНрж░рж╛ - ржЦрж╛рж▓рж┐ ржкрзЗржЯрзЗ рж╕ржХрж╛рж▓рзЗ
тАв рж░тАНрзНржпрж╛ржирж┐ржЯрж┐ржбрж┐ржи рззрзлрзж ржорж┐ржЧрзНрж░рж╛ - рж░рж╛рждрзЗ ржЦрж╛ржмрж╛рж░рзЗрж░ ржкрж░
тАв ржПржирзНржЯрж╛рж╕рж┐ржб - ржЦрж╛ржмрж╛рж░рзЗрж░ рзз ржШржирзНржЯрж╛ ржкрж░

**ржЦрж╛ржжрзНржпрж╛ржнрзНржпрж╛рж╕:**
тАв ржЕрж▓рзНржк ржЕрж▓рзНржк ржХрж░рзЗ ржШржи ржШржи ржЦрж╛ржи (ржжрж┐ржирзЗ рзл-рзм ржмрж╛рж░)
тАв рждрзЗрж▓-ржорж╕рж▓рж╛, ржнрж╛ржЬрж╛ржкрзЛржбрж╝рж╛ ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржи
тАв ржЪрж╛-ржХржлрж┐ рж╕рзАржорж┐ржд ржХрж░рзБржи
тАв рж░рж╛рждрзЗ ржЦрж╛ржУржпрж╝рж╛рж░ рзи-рзй ржШржирзНржЯрж╛ ржкрж░ ржШрзБржорж╛ржи

**ржЙржкржХрж╛рж░рзА ржЦрж╛ржмрж╛рж░:**
тАв ржжржЗ, ржХрж▓рж╛, рж╕рж┐ржжрзНржз ржЪрж╛рж▓
тАв ржУржЯрж╕, ржмрж╛рж░рзНрж▓рж┐, рж╕ржмрзБржЬ рж╢рж╛ржХрж╕ржмржЬрж┐
тАв ржХрзНржпрж╛ржорзЛржорж╛ржЗрж▓ ржЪрж╛, ржкрзБржжрж┐ржирж╛ ржкрж╛рждрж╛

**ржЬрзАржмржиржпрж╛рждрзНрж░рж╛:**
тАв ржирж┐ржпрж╝ржорж┐ржд ржмрзНржпрж╛ржпрж╝рж╛ржо ржХрж░рзБржи
тАв ржорж╛ржирж╕рж┐ржХ ржЪрж╛ржк ржХржорж╛ржи
тАв ржзрзВржоржкрж╛ржи ржУ ржоржжрзНржпржкрж╛ржи ржЫрж╛ржбрж╝рзБржи

ЁЯЪи **ржЬрж░рзБрж░рж┐ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржи:**
тАв рждрзАржмрзНрж░ ржкрзЗржЯ ржмрзНржпржерж╛
тАв ржмржорж┐рждрзЗ рж░ржХрзНржд ржмрж╛ ржХрж╛рж▓рзЛ рж░ржВ
тАв ржорж▓рзЗрж░ рж╕рж╛ржерзЗ рж░ржХрзНржд
тАв рж╣ржарж╛рзО ржУржЬржи ржХржорзЗ ржпрж╛ржУржпрж╝рж╛`
    }

    // Enhanced prescription help
    if (lowerMessage.includes('prescription') || lowerMessage.includes('ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи') || lowerMessage.includes('medicine')) {
      return `ЁЯТК **ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи рж╕рж╛рж╣рж╛ржпрзНржп:**

**MediLens ржП ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржг:**
ЁЯУ▒ Upload ржмрж╛ржЯржирзЗ ржЧрж┐ржпрж╝рзЗ ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржирзЗрж░ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи
ЁЯФН AI рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзЗ ржжрзЗржмрзЗ:

**ржпрж╛ ржкрж╛ржмрзЗржи:**
тАв тЬЕ рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝ (Disease Diagnosis)
тАв ЁЯзк ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржкрж░рзАржХрзНрж╖рж╛ (Required Tests)  
тАв ЁЯТК ржУрж╖рзБржзрзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржУ ржирж┐рж░рзНржжрзЗрж╢ржирж╛ (Medicine List & Instructions)
тАв тЪая╕П ржкрж╛рж░рзНрж╢рзНржмржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ (Side Effects)
тАв ЁЯУЛ рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рж╛ржорж░рзНрж╢ (Health Advice)

**ржУрж╖рзБржз рж╕рзЗржмржирзЗрж░ ржирж┐ржпрж╝ржо:**
тАв AC = ржЦрж╛ржмрж╛рж░рзЗрж░ ржЖржЧрзЗ (Before meal)
тАв PC = ржЦрж╛ржмрж╛рж░рзЗрж░ ржкрж░ (After meal)  
тАв HS = рж╢рзЛржпрж╝рж╛рж░ рж╕ржоржпрж╝ (At bedtime)
тАв OD = ржжрж┐ржирзЗ рзз ржмрж╛рж░, BD = ржжрж┐ржирзЗ рзи ржмрж╛рж░
тАв TDS = ржжрж┐ржирзЗ рзй ржмрж╛рж░, QID = ржжрж┐ржирзЗ рзк ржмрж╛рж░

ЁЯФЧ **ржПржЦржиржЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:** Upload ржкрзЗржЬрзЗ ржпрж╛ржи ржПржмржВ ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржЖржкрж▓рзЛржб ржХрж░рзБржи!`
    }
    
    // Default enhanced response
    return `ЁЯй║ **MediLens рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕рж╣рж╛ржпрж╝ржХ**

ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржиржЯрж┐ ржЖрж░рзЛ рж╕рзНржкрж╖рзНржЯ ржХрж░рзЗ ржЬрж╛ржирж╛рж▓рзЗ ржЖржорж┐ ржЖрж░рзЛ ржнрж╛рж▓рзЛ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░ржмред

**я┐╜ ржЬржиржкрзНрж░рж┐ржпрж╝ ржкрзНрж░рж╢рзНржирж╕ржорзВрж╣:**
тАв "ржЬрзНржмрж░ рж╣рж▓рзЗ ржХрж┐ ржХрж░ржм?" 
тАв "ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕ ржирж┐ржпрж╝ржирзНрждрзНрж░ржгрзЗрж░ ржЙржкрж╛ржпрж╝?"
тАв "рж░ржХрзНрждржЪрж╛ржк ржмрзЗрж╢рж┐ рж╣рж▓рзЗ ржХрж┐ ржЦрж╛ржм?"
тАв "ржорж╛ржерж╛ржмрзНржпржерж╛рж░ ржУрж╖рзБржз ржХрж┐?"
тАв "ржкрзЗржЯ ржмрзНржпржерж╛рж░ ржХрж╛рж░ржг ржХрж┐?"

**ЁЯЪА MediLens ржПрж░ ржмрж┐рж╢рзЗрж╖ рж╕рзБржмрж┐ржзрж╛:**
тАв ЁЯУЛ ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (AI Powered)
тАв ЁЯй║ ржнрж╛ржЗржЯрж╛рж▓ рж╕рж╛ржЗржи ржоржирж┐ржЯрж░рж┐ржВ  
тАв ЁЯСитАНтЪХя╕П ржбрж╛ржХрзНрждрж╛рж░ржжрзЗрж░ рждрж╛рж▓рж┐ржХрж╛
тАв ЁЯТм рзирзк/рзн рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рж╛ржорж░рзНрж╢

**тЪб ржжрзНрж░рзБржд рж╕рзЗржмрж╛ ржирж┐ржи:**
тАв Upload: ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржг
тАв Vitals: рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рж┐ржорж╛ржк  
тАв Doctors: ржбрж╛ржХрзНрждрж╛рж░ ржЦрзБржБржЬрзБржи

ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржпрзЗрж░ ржпрждрзНржи ржирж┐ржи, MediLens ржЖржкржирж╛рж░ ржкрж╛рж╢рзЗ! ЁЯТЪ`
  }

  const quickQuestions = [
    'ржЬрзНржмрж░ рж╣рж▓рзЗ ржХрж┐ ржХрж░ржм?',
    'рж░ржХрзНрждржЪрж╛ржк ржмрзЗрж╢рж┐ рж╣рж▓рзЗ ржХрж┐ ржЦрж╛ржм?',
    'ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕ ржХржирзНржЯрзНрж░рзЛрж▓ ржХрж░рж╛рж░ ржЙржкрж╛ржпрж╝?',
    'ржорж╛ржерж╛ржмрзНржпржерж╛рж░ ржУрж╖рзБржз ржХрж┐?',
    'ржкрзЗржЯ ржмрзНржпржерж╛рж░ ржХрж╛рж░ржг ржХрж┐?',
    'ржХрж╛рж╢рж┐рж░ ржШрж░рзЛржпрж╝рж╛ ржЪрж┐ржХрж┐рзОрж╕рж╛',
    'рж╣рж╛рж░рзНржЯрзЗрж░ рж╕ржорж╕рзНржпрж╛рж░ рж▓ржХрзНрж╖ржг',
    'ржПрж╕рж┐ржбрж┐ржЯрж┐рж░ рж╕ржорж╛ржзрж╛ржи',
    'ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржмрзБржЭрждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп',
    'ржУрж╖рзБржзрзЗрж░ ржкрж╛рж░рзНрж╢рзНржмржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛',
    'рж░ржХрзНржд ржкрж░рзАржХрзНрж╖рж╛рж░ рж░рж┐ржкрзЛрж░рзНржЯ',
    'ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ржпрж╝ ржХрж┐ ржХрж░ржм?'
  ]

  if (!currentUser) {
    return (
      <div className="min-h-screen bg-base-100 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">Please log in to chat</h1>
          <a href="/auth/login" className="btn btn-primary">Login</a>
        </div>
      </div>
    )
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-base-100 flex items-center justify-center">
        <div className="text-center">
          <span className="loading loading-spinner loading-lg"></span>
          <p className="mt-4">Loading your chat...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-base-100">
      <div className="container mx-auto max-w-6xl h-screen flex">
        {/* Sidebar - Chat History */}
        <div className="w-1/4 bg-base-200 border-r">
          <div className="p-4 border-b">
            <button 
              onClick={createNewChat}
              className="btn btn-primary btn-sm w-full"
            >
              тЮХ ржирждрзБржи ржЪрзНржпрж╛ржЯ
            </button>
          </div>
          <div className="overflow-y-auto h-full">
            {chatHistory.map((chat) => (
              <div
                key={chat.id}
                className={`p-3 border-b cursor-pointer hover:bg-base-300 ${
                  selectedChatId === chat.id ? 'bg-base-300' : ''
                }`}
                onClick={() => {
                  setSelectedChatId(chat.id)
                  loadChatMessages(chat.id)
                }}
              >
                <h4 className="text-sm font-medium truncate">
                  {chat.title || 'Chat ' + chat.id}
                </h4>
                <p className="text-xs text-base-content/60">
                  {new Date(chat.createdAt).toLocaleDateString('bn-BD')}
                </p>
              </div>
            ))}
          </div>
        </div>

        {/* Main Chat Area */}
        <div className="flex-1 flex flex-col">
          {/* Header */}
          <motion.div 
            className="bg-primary text-primary-content p-4"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            <div className="flex items-center justify-between">
              <button 
                onClick={() => router.back()} 
                className="btn btn-ghost btn-circle text-primary-content"
              >
                тЖР Back
              </button>
              <div className="text-center">
                <h1 className="text-2xl font-bold">ЁЯдЦ MediLens AI Assistant</h1>
                <p className="text-primary-content/80">ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп ржмрж┐рж╖ржпрж╝ржХ рж╕рж╣рж╛ржпрж╝ржХ</p>
              </div>
              <div></div>
            </div>
          </motion.div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 bg-base-100">
            <div className="space-y-4">
              {messages.map((message) => (
                <motion.div
                  key={message.id}
                  className={`chat ${message.type === 'user' ? 'chat-end' : 'chat-start'}`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="chat-image avatar">
                    <div className="w-10 rounded-full">
                      {message.type === 'user' ? (
                        <div className="w-10 h-10 rounded-full bg-primary flex items-center justify-center text-primary-content font-bold">
                          {currentUser?.firstName?.[0] || 'U'}
                        </div>
                      ) : (
                        <div className="w-10 h-10 rounded-full bg-secondary flex items-center justify-center text-secondary-content">
                          ЁЯдЦ
                        </div>
                      )}
                    </div>
                  </div>
                  <div className="chat-header">
                    {message.type === 'user' ? `${currentUser?.firstName || 'You'}` : 'MediLens AI'}
                    <time className="text-xs opacity-50 ml-2">
                      {message.timestamp.toLocaleTimeString('bn-BD')}
                    </time>
                  </div>
                  <div className={`chat-bubble ${message.type === 'user' ? 'chat-bubble-primary' : 'chat-bubble-secondary'} whitespace-pre-line`}>
                    {message.content}
                  </div>
                </motion.div>
              ))}
              
              {isTyping && (
                <motion.div
                  className="chat chat-start"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className="chat-image avatar">
                    <div className="w-10 rounded-full bg-secondary flex items-center justify-center text-secondary-content">
                      ЁЯдЦ
                    </div>
                  </div>
                  <div className="chat-bubble chat-bubble-secondary">
                    <span className="loading loading-dots loading-sm"></span>
                    <span className="ml-2">ржЪрж┐ржирзНрждрж╛ ржХрж░ржЫрж┐...</span>
                  </div>
                </motion.div>
              )}
              <div ref={messagesEndRef} />
            </div>
          </div>

          {/* Quick Questions */}
          <div className="p-4 bg-base-200 border-t">
            <p className="text-sm text-base-content/70 mb-2">ржжрзНрж░рзБржд ржкрзНрж░рж╢рзНржи:</p>
            <div className="flex flex-wrap gap-2">
              {quickQuestions.map((question, index) => (
                <button
                  key={index}
                  className="btn btn-xs btn-outline"
                  onClick={() => setInputMessage(question)}
                  disabled={isTyping}
                >
                  {question}
                </button>
              ))}
            </div>
          </div>

          {/* Input */}
          <form onSubmit={handleSendMessage} className="p-4 bg-base-200">
            <div className="flex gap-2">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                placeholder="ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп ржмрж┐рж╖ржпрж╝ржХ ржкрзНрж░рж╢рзНржи рж▓рж┐ржЦрзБржи... (ржмрж╛ржВрж▓рж╛ ржмрж╛ ржЗржВрж░рзЗржЬрж┐рждрзЗ)"
                className="input input-bordered flex-1"
                disabled={isTyping}
              />
              <button
                type="submit"
                className={`btn btn-primary ${isTyping ? 'loading' : ''}`}
                disabled={!inputMessage.trim() || isTyping}
              >
                {isTyping ? 'ржкрж╛ржарж╛ржЪрзНржЫрж┐...' : 'ЁЯУд Send'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}
