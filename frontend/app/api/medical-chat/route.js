import { GoogleGenerativeAI } from '@google/generative-ai'
import { NextResponse } from 'next/server'

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)

export async function POST(request) {
  try {
    const { message, chatHistory } = await request.json()

    if (!message) {
      return NextResponse.json({ error: 'No message provided' }, { status: 400 })
    }

    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })

    // Build conversation context
    let conversationContext = ""
    if (chatHistory && chatHistory.length > 0) {
      conversationContext = chatHistory.map(msg => 
        `${msg.type === 'user' ? 'рж░рзЛржЧрзА' : 'ржбрж╛ржХрзНрждрж╛рж░'}: ${msg.content}`
      ).join('\n')
    }

    const prompt = `
ржЖржкржирж┐ ржПржХржЬржи ржЕржнрж┐ржЬрзНржЮ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзА ржЪрж┐ржХрж┐рзОрж╕ржХ ржПржмржВ MediLens ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржорзЗрж░ AI рж╕рж╣рж╛ржпрж╝ржХред ржЖржкржирж╛рж░ ржмрж┐рж╢рзЗрж╖рждрзНржм:

ЁЯПе **ржмрж┐рж╢рзЗрж╖рждрзНржм:**
- рж╕рж╛ржзрж╛рж░ржг ржЪрж┐ржХрж┐рзОрж╕рж╛ (General Medicine)
- ржЬрж░рзБрж░рж┐ ржЪрж┐ржХрж┐рзОрж╕рж╛ (Emergency Medicine)  
- ржкрзНрж░рж╛ржержорж┐ржХ рж╕рзНржмрж╛рж╕рзНржерзНржпрж╕рзЗржмрж╛ (Primary Healthcare)
- ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (Prescription Analysis)
- рж╕рзНржмрж╛рж╕рзНржерзНржп рж╢рж┐ржХрзНрж╖рж╛ (Health Education)

ЁЯТК **ржЖржкржирж╛рж░ ржХрзНрж╖ржорждрж╛:**
- ржмрж╛ржВрж▓рж╛ржпрж╝ рж╕рж╣ржЬ ржнрж╛рж╖рж╛ржпрж╝ ржмрзНржпрж╛ржЦрзНржпрж╛
- рж░рзЛржЧрзЗрж░ рж▓ржХрзНрж╖ржг ржЪрж┐рж╣рзНржирж┐рждржХрж░ржг
- ржУрж╖рзБржзрзЗрж░ рж╕ржарж┐ржХ ржмрзНржпржмрж╣рж╛рж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛
- ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ рж╢ржирж╛ржХрзНрждржХрж░ржг
- ржЬрзАржмржиржпрж╛рждрзНрж░рж╛рж░ ржкрж░рж╛ржорж░рзНрж╢
- ржШрж░рзЛржпрж╝рж╛ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкржжрзНржзрждрж┐

ЁЯЪи **ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**
- рж╕ржмрж╕ржоржпрж╝ рж░рзЛржЧрзАрж░ ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржкрзНрж░рж╛ржзрж╛ржирзНржп ржжрж┐ржи
- ржЧрзБрж░рзБрждрж░ ржЙржкрж╕рж░рзНржЧрзЗ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрждрзЗ ржмрж▓рзБржи
- ржУрж╖рзБржзрзЗрж░ ржирж╛ржо ржмрж▓рж╛рж░ рж╕ржоржпрж╝ рж╕рждрж░рзНржХрждрж╛ ржЕржмрж▓ржорзНржмржи ржХрж░рзБржи
- ржЕржирж┐рж╢рзНржЪрж┐ржд ржерж╛ржХрж▓рзЗ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржбрж╛ржХрзНрждрж╛рж░рзЗрж░ ржХрж╛ржЫрзЗ ржкрж╛ржарж╛ржи

**ржкрзВрж░рзНржмржмрж░рзНрждрзА ржХржерзЛржкржХржержи:**
${conversationContext}

**рж░рзЛржЧрзАрж░ ржмрж░рзНрждржорж╛ржи ржкрзНрж░рж╢рзНржи/рж╕ржорж╕рзНржпрж╛:**
"${message}"

**ржЙрждрзНрждрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**
1. **рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржорзВрж▓рзНржпрж╛ржпрж╝ржи:** ржЬрж░рзБрж░рж┐ ржХрж┐ржЫрзБ ржХрж┐ржирж╛ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи
2. **рж▓ржХрзНрж╖ржг ржмрж┐рж╢рзНрж▓рзЗрж╖ржг:** ржЙржкрж╕рж░рзНржЧрзЗрж░ ржнрж┐рждрзНрждрж┐рждрзЗ рж╕ржорзНржнрж╛ржмрзНржп ржХрж╛рж░ржг ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржи  
3. **рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржкрж░рж╛ржорж░рзНрж╢:** ржПржЦржиржЗ ржХрж┐ ржХрж░рждрзЗ рж╣ржмрзЗ
4. **ржУрж╖рзБржз/ржЪрж┐ржХрж┐рзОрж╕рж╛:** ржирж┐рж░рж╛ржкржж ржУ ржкрзНрж░ржорж╛ржгрж┐ржд ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкржжрзНржзрждрж┐
5. **рж╕рждрж░рзНржХрждрж╛:** ржХржЦржи ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрждрзЗ рж╣ржмрзЗ
6. **ржкрзНрж░рждрж┐рж░рзЛржз:** ржнржмрж┐рж╖рзНржпрждрзЗ ржПржбрж╝рж╛ржирзЛрж░ ржЙржкрж╛ржпрж╝

**ржЙрждрзНрждрж░рзЗрж░ ржнрж╛рж╖рж╛:** рж╕рж╣ржЬ ржмрж╛ржВрж▓рж╛
**ржЙрждрзНрждрж░рзЗрж░ ржжрзИрж░рзНржШрзНржп:** ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржХрж┐ржирзНрждрзБ рж╕ржВржХрзНрж╖рж┐ржкрзНржд
**ржЙрждрзНрждрж░рзЗрж░ рж╕рзНржмрж░:** рж╕рж╣рж╛ржирзБржнрзВрждрж┐рж╢рзАрж▓ ржУ ржкрзЗрж╢рж╛ржжрж╛рж░

ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЙржкрж░рзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛ ржЕржирзБржпрж╛ржпрж╝рзА ржЙрждрзНрждрж░ ржжрж┐ржи:
`

    const result = await model.generateContent(prompt)
    const response = await result.response
    const botResponse = response.text()

    // Clean and format the response
    const cleanedResponse = botResponse
      .replace(/\*\*/g, '') // Remove bold markdown
      .replace(/\*/g, '') // Remove other markdown
      .trim()

    // Add emojis and structure for better readability
    const formattedResponse = formatMedicalResponse(cleanedResponse, message)

    return NextResponse.json({
      success: true,
      response: formattedResponse,
      source: 'gemini-medical-ai'
    })

  } catch (error) {
    console.error('Medical chat error:', error)
    
    // Fallback to rule-based responses
    const fallbackResponse = getMedicalFallbackResponse(message)
    
    return NextResponse.json({
      success: true,
      response: fallbackResponse,
      source: 'fallback-medical'
    })
  }
}

function formatMedicalResponse(response, originalMessage) {
  const lowerMessage = originalMessage.toLowerCase()
  
  // Add appropriate medical emojis based on content
  let formattedResponse = response
  
  if (lowerMessage.includes('ржЬрзНржмрж░') || lowerMessage.includes('fever')) {
    formattedResponse = 'ЁЯМбя╕П ' + formattedResponse
  } else if (lowerMessage.includes('ржорж╛ржерж╛ржмрзНржпржерж╛') || lowerMessage.includes('headache')) {
    formattedResponse = 'ЁЯза ' + formattedResponse
  } else if (lowerMessage.includes('ржкрзЗржЯ') || lowerMessage.includes('stomach')) {
    formattedResponse = 'ЁЯН╜я╕П ' + formattedResponse
  } else if (lowerMessage.includes('рж╣рж╛рж░рзНржЯ') || lowerMessage.includes('heart')) {
    formattedResponse = 'тЭдя╕П ' + formattedResponse
  } else if (lowerMessage.includes('ржХрж╛рж╢рж┐') || lowerMessage.includes('cough')) {
    formattedResponse = 'ЁЯШ╖ ' + formattedResponse
  } else {
    formattedResponse = 'ЁЯй║ ' + formattedResponse
  }
  
  // Add standard medical disclaimer
  formattedResponse += '\n\nтЪая╕П **ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг:** ржПржЯрж┐ ржкрзНрж░рж╛ржержорж┐ржХ ржкрж░рж╛ржорж░рзНрж╢ред ржЧрзБрж░рзБрждрж░ рж╕ржорж╕рзНржпрж╛ржпрж╝ ржЕржмрж╢рзНржпржЗ ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ рж╕рж╛ржерзЗ ржжрзЗржЦрж╛ ржХрж░рзБржиред'
  
  return formattedResponse
}

function getMedicalFallbackResponse(message) {
  const lowerMessage = message.toLowerCase()
  
  // Emergency conditions - immediate attention needed
  const emergencyKeywords = [
    'chest pain', 'difficulty breathing', 'unconscious', 'severe bleeding',
    'ржмрзБржХрзЗ ржмрзНржпржерж╛', 'рж╢рзНржмрж╛рж╕ ржирж┐рждрзЗ ржХрж╖рзНржЯ', 'ржЕржЬрзНржЮрж╛ржи', 'рж░ржХрзНрждржХрзНрж╖рж░ржг'
  ]
  
  if (emergencyKeywords.some(keyword => lowerMessage.includes(keyword))) {
    return `ЁЯЪи **ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ рж╕ржирж╛ржХрзНржд ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!**

ржЕржмрж┐рж▓ржорзНржмрзЗ ржирж┐ржХржЯрж╕рзНрже рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗрж░ ржЬрж░рзБрж░рж┐ ржмрж┐ржнрж╛ржЧрзЗ ржпрж╛ржи ржмрж╛ рзжрзжрзж ржиржорзНржмрж░рзЗ ржХрж▓ ржХрж░рзБржиред

ЁЯПе **рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржХрж░ржгрзАржпрж╝:**
тАв рж░рзЛржЧрзАржХрзЗ ржЖрж░рж╛ржоржжрж╛ржпрж╝ржХ ржЕржмрж╕рзНржерж╛ржирзЗ рж░рж╛ржЦрзБржи
тАв рж╢рзНржмрж╛рж╕-ржкрзНрж░рж╢рзНржмрж╛рж╕рзЗрж░ ржжрж┐ржХрзЗ ржиржЬрж░ рж░рж╛ржЦрзБржи  
тАв ржЬрзНржЮрж╛ржи рж╣рж╛рж░рж╛рж▓рзЗ ржкрж╛рж╢рзЗ рж╢рзБржЗржпрж╝рзЗ ржжрж┐ржи
тАв ржжрзНрж░рзБржд рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржирж┐ржпрж╝рзЗ ржпрж╛ржи

тЪая╕П **ржмрж┐рж▓ржорзНржм ржХрж░ржмрзЗржи ржирж╛ - ржЬрзАржмржи ржЭрзБржБржХрж┐рждрзЗ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ!**`
  }
  
  // Common medical responses
  if (lowerMessage.includes('ржЬрзНржмрж░') || lowerMessage.includes('fever')) {
    return `ЁЯМбя╕П **ржЬрзНржмрж░рзЗрж░ ржЪрж┐ржХрж┐рзОрж╕рж╛:**

**рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржХрж░ржгрзАржпрж╝:**
тАв ржкрзНржпрж╛рж░рж╛рж╕рж┐ржЯрж╛ржорж▓ рзлрзжрзж ржорж┐ржЧрзНрж░рж╛ - ржкрзНрж░рждрж┐ рзм ржШржирзНржЯрж╛ржпрж╝
тАв ржкрзНрж░ржЪрзБрж░ ржкрж╛ржирж┐ ржУ рждрж░рж▓ ржЦрж╛ржмрж╛рж░
тАв рж╣рж╛рж▓ржХрж╛ ржХрж╛ржкржбрж╝ ржкрж░рзБржи
тАв ржХрзБрж╕рзБржо ржЧрж░ржо ржкрж╛ржирж┐рждрзЗ ржЧрзЛрж╕рж▓

**рж╕рждрж░рзНржХрждрж╛:**
тАв рззрзжрзй┬░F ржПрж░ ржмрзЗрж╢рж┐ ржЬрзНржмрж░
тАв рзй ржжрж┐ржирзЗрж░ ржмрзЗрж╢рж┐ рж╕рзНржерж╛ржпрж╝рзА рж╣рж▓рзЗ
тАв рж╢рзНржмрж╛рж╕ ржХрж╖рзНржЯ ржмрж╛ ржмрзБржХрзЗ ржмрзНржпржерж╛ рж╣рж▓рзЗ

тЮбя╕П ржПрж╕ржм ржХрзНрж╖рзЗрждрзНрж░рзЗ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржиред`
  }
  
  if (lowerMessage.includes('ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕') || lowerMessage.includes('diabetes')) {
    return `ЁЯНО **ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг:**

**ржЦрж╛ржжрзНржп ржирж┐ржпрж╝ржирзНрждрзНрж░ржг:**
тАв ржЪрж┐ржирж┐, ржорж┐рж╖рзНржЯрж┐ ржУ ржнрж╛ржд ржХржо ржЦрж╛ржи
тАв ржмрзЗрж╢рж┐ рж╢рж╛ржХрж╕ржмржЬрж┐ ржУ ржЖржБрж╢ржпрзБржХрзНржд ржЦрж╛ржмрж╛рж░
тАв ржирж┐ржпрж╝ржорж┐ржд рж╕ржоржпрж╝рзЗ ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи

**ржЬрзАржмржиржпрж╛рждрзНрж░рж╛:**
тАв ржкрзНрж░рждрж┐ржжрж┐ржи рзйрзж ржорж┐ржирж┐ржЯ рж╣рж╛ржБржЯрзБржи
тАв ржУржЬржи ржирж┐ржпрж╝ржирзНрждрзНрж░ржгрзЗ рж░рж╛ржЦрзБржи
тАв ржкрж░рзНржпрж╛ржкрзНржд ржШрзБржо ржирж┐ржи

**ржирж┐ржпрж╝ржорж┐ржд ржкрж░рзАржХрзНрж╖рж╛:**
тАв ржорж╛рж╕рзЗ рзз ржмрж╛рж░ рж░ржХрзНрждрзЗрж░ ржЪрж┐ржирж┐
тАв рзй ржорж╛рж╕рзЗ рзз ржмрж╛рж░ HbA1c
тАв ржЪрзЛржЦ ржУ ржХрж┐ржбржирж┐ ржЪрзЗржХржЖржк`
  }
  
  if (lowerMessage.includes('рж░ржХрзНрждржЪрж╛ржк') || lowerMessage.includes('pressure')) {
    return `ЁЯй║ **ржЙржЪрзНржЪ рж░ржХрзНрждржЪрж╛ржк ржирж┐ржпрж╝ржирзНрждрзНрж░ржг:**

**ржЦрж╛ржжрзНржпрж╛ржнрзНржпрж╛рж╕:**
тАв рж▓ржмржг ржХржо ржЦрж╛ржи (ржжрж┐ржирзЗ рзл ржЧрзНрж░рж╛ржорзЗрж░ ржХржо)
тАв рждрж╛ржЬрж╛ ржлрж▓ ржУ рж╕ржмржЬрж┐ ржмрзЗрж╢рж┐ ржЦрж╛ржи
тАв рждрзЗрж▓-ржЪрж░рзНржмрж┐ ржХржо ржЦрж╛ржи

**ржЬрзАржмржиржпрж╛рждрзНрж░рж╛:**
тАв ржирж┐ржпрж╝ржорж┐ржд ржмрзНржпрж╛ржпрж╝рж╛ржо ржХрж░рзБржи
тАв ржзрзВржоржкрж╛ржи ржУ ржоржжрзНржпржкрж╛ржи ржЫрж╛ржбрж╝рзБржи
тАв ржорж╛ржирж╕рж┐ржХ ржЪрж╛ржк ржХржорж╛ржи

**ржУрж╖рзБржз:**
тАв ржирж┐ржпрж╝ржорж┐ржд ржУрж╖рзБржз ржЦрж╛ржи, ржмржирзНржз ржХрж░ржмрзЗржи ржирж╛
тАв ржкрзНрж░рждрж┐ржжрж┐ржи ржПржХржЗ рж╕ржоржпрж╝рзЗ ржЦрж╛ржи`
  }
  
  // Default response for unrecognized queries
  return `ЁЯй║ **рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рж╛ржорж░рзНрж╢:**

ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржиржЯрж┐ ржЖрж░рзЛ рж╕рзНржкрж╖рзНржЯ ржХрж░рзЗ ржЬрж╛ржирж╛рж▓рзЗ ржЖржорж┐ ржЖрж░рзЛ ржнрж╛рж▓рзЛ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░ржмред

**ржЖржорж┐ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐:**
тАв рж░рзЛржЧрзЗрж░ рж▓ржХрзНрж╖ржг ржУ ржЪрж┐ржХрж┐рзОрж╕рж╛
тАв ржУрж╖рзБржзрзЗрж░ рж╕ржарж┐ржХ ржмрзНржпржмрж╣рж╛рж░
тАв ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ ржЪрж┐рж╣рзНржирж┐рждржХрж░ржг
тАв рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ ржЬрзАржмржиржпрж╛рждрзНрж░рж╛рж░ ржкрж░рж╛ржорж░рзНрж╢
тАв ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржмрзБржЭрждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп

ЁЯТм **ржЙржжрж╛рж╣рж░ржг ржкрзНрж░рж╢рзНржи:**
"ржЬрзНржмрж░ рж╣рж▓рзЗ ржХрж┐ ржХрж░ржм?"
"ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕ ржирж┐ржпрж╝ржирзНрждрзНрж░ржгрзЗрж░ ржЙржкрж╛ржпрж╝?"
"ржмрзБржХрзЗ ржмрзНржпржерж╛ рж╣ржЪрзНржЫрзЗ ржХрзЗржи?"

ЁЯУ▒ ржоржирзЗ рж░рж╛ржЦржмрзЗржи: MediLens ржП ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржЖржкрж▓рзЛржб ржХрж░рзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржкрзЗрждрзЗ ржкрж╛рж░рзЗржиред`
}
