import { GoogleGenerativeAI } from '@google/generative-ai'

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)

export async function POST(request) {
  try {
    const { conversation, prescriptionContext, chatContext } = await request.json()

    if (!conversation || conversation.trim().length === 0) {
      return Response.json({ title: 'ржирждрзБржи ржЪрзНржпрж╛ржЯ' })
    }

    const model = genAI.getGenerativeModel({ model: 'gemini-pro' })

    const prompt = `
You are an AI assistant that generates concise, meaningful chat titles in Bengali for medical consultations.

Context:
- Conversation: "${conversation}"
- Type: ${prescriptionContext}
- Chat Context: ${chatContext}

Instructions:
1. Generate a short, descriptive title (maximum 4-5 words) in Bengali that captures the main medical topic
2. Use appropriate medical emojis if relevant
3. Be specific about the health condition or topic discussed
4. Use Bengali language for the title
5. Make it helpful for users to identify the conversation later

Examples:
- For fever discussion: "ЁЯМбя╕П ржЬрзНржмрж░рзЗрж░ ржЪрж┐ржХрж┐рзОрж╕рж╛"
- For prescription analysis: "ЁЯТК ржУрж╖рзБржзрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢"
- For diabetes consultation: "ЁЯНО ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг"
- For headache: "ЁЯза ржорж╛ржерж╛ржмрзНржпржерж╛рж░ рж╕ржорж╛ржзрж╛ржи"

Generate only the title, nothing else:
`

    const result = await model.generateContent(prompt)
    const response = await result.response
    let title = response.text().trim()

    // Clean up the response
    title = title.replace(/['"]/g, '').trim()
    
    // Ensure it's not too long
    if (title.length > 30) {
      title = title.substring(0, 27) + '...'
    }

    // Fallback if empty or invalid
    if (!title || title.length < 3) {
      title = generateFallbackTitle(conversation, prescriptionContext)
    }

    return Response.json({ title })
  } catch (error) {
    console.error('Error generating chat title:', error)
    
    // Fallback title generation
    const fallbackTitle = generateFallbackTitle(
      request.conversation || '', 
      request.prescriptionContext || 'general_health'
    )
    
    return Response.json({ title: fallbackTitle })
  }
}

function generateFallbackTitle(conversation, context) {
  const text = conversation.toLowerCase()
  
  // Medical condition patterns
  const patterns = [
    { keywords: ['ржЬрзНржмрж░', 'fever'], title: 'ЁЯМбя╕П ржЬрзНржмрж░рзЗрж░ рж╕ржорж╕рзНржпрж╛' },
    { keywords: ['ржорж╛ржерж╛ржмрзНржпржерж╛', 'headache'], title: 'ЁЯза ржорж╛ржерж╛ржмрзНржпржерж╛' },
    { keywords: ['ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕', 'diabetes'], title: 'ЁЯНО ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕' },
    { keywords: ['ржХрж╛рж╢рж┐', 'cough'], title: 'ЁЯШ╖ ржХрж╛рж╢рж┐рж░ рж╕ржорж╕рзНржпрж╛' },
    { keywords: ['ржкрзЗржЯ', 'stomach'], title: 'ЁЯН╜я╕П ржкрзЗржЯрзЗрж░ рж╕ржорж╕рзНржпрж╛' },
    { keywords: ['ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи', 'ржУрж╖рзБржз'], title: 'ЁЯТК ржУрж╖рзБржз ржкрж░рж╛ржорж░рзНрж╢' },
    { keywords: ['рж░ржХрзНрждржЪрж╛ржк', 'pressure'], title: 'ЁЯй║ рж░ржХрзНрждржЪрж╛ржк' },
    { keywords: ['рж╣рзГржжрж░рзЛржЧ', 'heart'], title: 'тЭдя╕П рж╣рзГржжрж░рзЛржЧ' }
  ]

  for (const pattern of patterns) {
    if (pattern.keywords.some(keyword => text.includes(keyword))) {
      return pattern.title
    }
  }

  if (context === 'prescription_analysis') {
    return 'ЁЯТК ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржг'
  }

  return 'рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рж╛ржорж░рзНрж╢'
}
